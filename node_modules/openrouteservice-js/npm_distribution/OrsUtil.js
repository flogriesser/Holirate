'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('./constants');

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OrsUtil = function () {
  function OrsUtil() {
    _classCallCheck(this, OrsUtil);
  }

  _createClass(OrsUtil, [{
    key: 'copyProperties',
    value: function copyProperties(args, argsInto) {
      if (!args) return argsInto;

      for (var prop in args) {
        // eslint-disable-next-line no-prototype-builtins
        if (args.hasOwnProperty(prop) && args[prop] !== undefined) {
          argsInto[prop] = args[prop];
        }
      }
      return argsInto;
    }
  }, {
    key: 'prepareMeta',
    value: function prepareMeta(args) {
      return {
        host: args[_constants2.default.propNames.host],
        api_version: args[_constants2.default.propNames.apiVersion],
        profile: args[_constants2.default.propNames.profile],
        format: args[_constants2.default.propNames.format],
        service: args[_constants2.default.propNames.service],
        api_key: args[_constants2.default.propNames.apiKey],
        mime_type: args[_constants2.default.propNames.mimeType]
      };
    }
  }, {
    key: 'prepareRequest',
    value: function prepareRequest(args) {
      delete args[_constants2.default.propNames.mimeType];
      delete args[_constants2.default.propNames.host];
      delete args[_constants2.default.propNames.apiVersion];
      delete args[_constants2.default.propNames.service];
      delete args[_constants2.default.propNames.apiKey];
      delete args[_constants2.default.propNames.profile];
      delete args[_constants2.default.propNames.format];
      delete args[_constants2.default.propNames.timeout];
      return _extends({}, args);
    }

    /**
     * Prepare the request url based on url constituents
     * @param {Objet} args
     */

  }, {
    key: 'prepareUrl',
    value: function prepareUrl(args) {
      var url = '';

      // make path
      var urlPathParts = [];

      // If the service already defines the path
      // to the request service we have to add
      // only yhe profile and the format to the url
      // eslint-disable-next-line prettier/prettier
      if (args[_constants2.default.propNames.service] && args[_constants2.default.propNames.service].indexOf('http') === 0) {
        url = args[_constants2.default.propNames.service];
        urlPathParts = [args[_constants2.default.propNames.profile], args[_constants2.default.propNames.format]];
      } else {
        // if not, build the url from scratch
        url = args[_constants2.default.propNames.host];
        urlPathParts = [args[_constants2.default.propNames.apiVersion], args[_constants2.default.propNames.service], args[_constants2.default.propNames.profile], args[_constants2.default.propNames.format]];
      }

      var urlPath = '/';
      var counter = 0;
      for (var key in urlPathParts) {
        if (urlPathParts[key]) {
          if (counter > 0 && counter) {
            urlPath += '/';
          }
          urlPath += urlPathParts[key];
        }
        counter++;
      }

      // Remove double slashs from path
      var cleanUrlPath = urlPath.replace(/\/\//g, '/');
      url += cleanUrlPath;

      // The end of the url can not be a slash
      if (url.slice(-1) === '/') {
        url = url.slice(0, -1);
      }
      return url;
    }

    /**
     * Set defaults for a request comparing and posibly overwritting instance args
     * @param {Object} instanceArgs
     * @param {Object} requestArgs
     * @param {Boolean} setAPIVersion
     */

  }, {
    key: 'setRequestDefaults',
    value: function setRequestDefaults(instanceArgs, requestArgs) {
      var setAPIVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (requestArgs[_constants2.default.propNames.service]) {
        // eslint-disable-next-line prettier/prettier
        instanceArgs[_constants2.default.propNames.service] = requestArgs[_constants2.default.propNames.service];
      }
      if (requestArgs[_constants2.default.propNames.host]) {
        // eslint-disable-next-line prettier/prettier
        instanceArgs[_constants2.default.propNames.host] = requestArgs[_constants2.default.propNames.host];
      }
      if (!instanceArgs[_constants2.default.propNames.host]) {
        instanceArgs[_constants2.default.propNames.host] = _constants2.default.defaultHost;
      }
      if (setAPIVersion === true) {
        if (!requestArgs[_constants2.default.propNames.apiVersion]) {
          requestArgs.api_version = _constants2.default.defaultAPIVersion;
        }
        if (!requestArgs[_constants2.default.propNames.apiVersion]) {
          requestArgs.api_version = _constants2.default.defaultAPIVersion;
        }
      }
    }
  }]);

  return OrsUtil;
}();

exports.default = OrsUtil;