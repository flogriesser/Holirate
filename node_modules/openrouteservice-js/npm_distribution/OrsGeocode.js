'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _OrsUtil = require('./OrsUtil');

var _OrsUtil2 = _interopRequireDefault(_OrsUtil);

var _constants = require('./constants');

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var orsUtil = new _OrsUtil2.default();

var OrsGeocode = function () {
  function OrsGeocode(args) {
    _classCallCheck(this, OrsGeocode);

    this.args = {};
    if (_constants2.default.apiKeyPropName in args) {
      this.args.api_key = args.api_key;
    } else {
      // eslint-disable-next-line no-console
      console.error(_constants2.default.missingAPIKeyMsg);
    }
    if (_constants2.default.propNames.host in args) {
      this.args[_constants2.default.propNames.host] = args[_constants2.default.propNames.host];
    }
    if (_constants2.default.propNames.service in args) {
      this.args[_constants2.default.propNames.service] = args[_constants2.default.propNames.service];
    }

    this.lookupParameter = {
      api_key: function api_key(key, val) {
        return key + '=' + val;
      },
      text: function text(key, val) {
        return '&' + key + '=' + val;
      },
      focus_point: function focus_point(key, val) {
        var urlParams = '';
        urlParams += '&' + 'focus.point.lon' + '=' + val[1];
        urlParams += '&' + 'focus.point.lat' + '=' + val[0];
        return urlParams;
      },
      boundary_bbox: function boundary_bbox(key, val) {
        var urlParams = '';
        urlParams += '&' + 'boundary.rect.min_lon' + '=' + val[0][1];
        urlParams += '&' + 'boundary.rect.min_lat' + '=' + val[0][0];
        urlParams += '&' + 'boundary.rect.max_lon' + '=' + val[1][1];
        urlParams += '&' + 'boundary.rect.max_lat' + '=' + val[1][0];

        return urlParams;
      },
      point: function point(key, val) {
        var urlParams = '';
        urlParams += '&' + 'point.lon' + '=' + val.lat_lng[1];
        urlParams += '&' + 'point.lat' + '=' + val.lat_lng[0];
        urlParams += '&' + 'boundary.circle.radius' + '=' + val.radius;
        return urlParams;
      },
      boundary_circle: function boundary_circle(key, val) {
        var urlParams = '';
        urlParams += '&' + 'boundary.circle.lon' + '=' + val.lat_lng[1];
        urlParams += '&' + 'boundary.circle.lat' + '=' + val.lat_lng[0];
        urlParams += '&' + 'boundary.circle.radius' + '=' + val.radius;

        return urlParams;
      },
      sources: function sources(key, val) {
        var urlParams = '&sources=';
        for (var source in val) {
          urlParams += source + ',';
        }
        return urlParams;
      },
      layers: function layers(key, val) {
        var urlParams = '&layers=';
        var counter = 0;
        for (key in val) {
          if (counter > 0) {
            urlParams += ',';
          }
          urlParams += val[key];
          counter++;
        }
        return urlParams;
      },
      boundary_country: function boundary_country(key, val) {
        var urlParams = '&' + 'boundary.country' + '=' + val;
        return urlParams;
      },
      size: function size(key, val) {
        return '&' + key + '=' + val;
      },
      address: function address(key, val) {
        return '&' + key + '=' + val;
      },
      neighbourhood: function neighbourhood(key, val) {
        return '&' + key + '=' + val;
      },
      borough: function borough(key, val) {
        return '&' + key + '=' + val;
      },
      locality: function locality(key, val) {
        return '&' + key + '=' + val;
      },
      county: function county(key, val) {
        return '&' + key + '=' + val;
      },
      region: function region(key, val) {
        return '&' + key + '=' + val;
      },
      postalcode: function postalcode(key, val) {
        return '&' + key + '=' + val;
      },
      country: function country(key, val) {
        return '&' + key + '=' + val;
      }
    };
  }

  _createClass(OrsGeocode, [{
    key: 'clear',
    value: function clear() {
      for (var variable in this.args) {
        if (variable !== _constants2.default.apiKeyPropName) delete this.args[variable];
      }
    }
  }, {
    key: 'getParametersAsQueryString',
    value: function getParametersAsQueryString(args) {
      var queryString = '';
      for (var key in args) {
        var val = args[key];
        if (_constants2.default.baseUrlConstituents.indexOf(key) > -1) {
          continue;
        } else queryString += this.lookupParameter[key](key, val);
      }
      return queryString;
    }
  }, {
    key: 'geocodePromise',
    value: function geocodePromise() {
      var that = this;
      return new _bluebird2.default(function (resolve, reject) {
        var timeout = 5000;

        // Use old API via GET
        var url = orsUtil.prepareUrl(that.args);

        // Add url query string from args
        url += '?' + that.getParametersAsQueryString(that.args);

        var orsRequest = _superagent2.default.get(url).timeout(timeout);

        for (var key in that.customHeaders) {
          orsRequest.set(key, that.customHeaders[key]);
        }
        orsRequest.end(function (err, res) {
          if (err || !res.ok) {
            // eslint-disable-next-line no-console
            console.error(err);
            reject(err);
          } else if (res) {
            resolve(res.body || res.text);
          }
        });
      });
    }
  }, {
    key: 'geocode',
    value: function geocode(reqArgs) {
      // Get custom header and remove from args
      this.customHeaders = [];
      if (reqArgs.customHeaders) {
        this.customHeaders = reqArgs.customHeaders;
        delete reqArgs.customHeaders;
      }
      orsUtil.setRequestDefaults(this.args, reqArgs);
      // eslint-disable-next-line prettier/prettier
      if (!this.args[_constants2.default.propNames.service] && !reqArgs[_constants2.default.propNames.service]) {
        reqArgs.service = 'geocode/search';
      }
      orsUtil.copyProperties(reqArgs, this.args);
      return this.geocodePromise();
    }
  }, {
    key: 'reverseGeocode',
    value: function reverseGeocode(reqArgs) {
      // Get custom header and remove from args
      this.customHeaders = [];
      if (reqArgs.customHeaders) {
        this.customHeaders = reqArgs.customHeaders;
        delete reqArgs.customHeaders;
      }
      orsUtil.setRequestDefaults(this.args, reqArgs);
      // eslint-disable-next-line prettier/prettier
      if (!this.args[_constants2.default.propNames.service] && !reqArgs[_constants2.default.propNames.service]) {
        reqArgs.service = 'geocode/reverse';
      }
      orsUtil.copyProperties(reqArgs, this.args);
      return this.geocodePromise();
    }
  }, {
    key: 'structuredGeocode',
    value: function structuredGeocode(reqArgs) {
      orsUtil.setRequestDefaults(this.args, reqArgs);
      // eslint-disable-next-line prettier/prettier
      if (!this.args[_constants2.default.propNames.service] && !reqArgs[_constants2.default.propNames.service]) {
        reqArgs.service = 'geocode/search/structured';
      }
      orsUtil.copyProperties(reqArgs, this.args);
      return this.geocodePromise();
    }
  }]);

  return OrsGeocode;
}();

exports.default = OrsGeocode;