'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OrsInput = function () {
  function OrsInput(input, input2) {
    _classCallCheck(this, OrsInput);

    this.setCoord(input, input2);
  }

  _createClass(OrsInput, [{
    key: 'round',
    value: function round(val, precision) {
      if (precision === undefined) precision = 1e6;
      return Math.round(val * precision) / precision;
    }
  }, {
    key: 'setCoord',
    value: function setCoord(lat, lng) {
      this.coord = [this.round(lat), this.round(lng)];
    }
  }, {
    key: 'isObject',
    value: function isObject(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue.toLowerCase() === '[object object]';
    }
  }, {
    key: 'isString',
    value: function isString(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue.toLowerCase() === '[object string]';
    }
  }, {
    key: 'set',
    value: function set(strOrObject, input2) {
      if (input2) {
        this.setCoord(strOrObject, input2);
        return;
      }

      if (OrsInput.isObject(strOrObject)) {
        this.setCoord(strOrObject.lat, strOrObject.lng);
      } else if (OrsInput.isString(strOrObject)) {
        var index = strOrObject.indexOf(',');
        if (index >= 0) {
          this.coord = [this.round(parseFloat(strOrObject.substr(0, index))), this.round(parseFloat(strOrObject.substr(index + 1)))];
        }
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      if (this.lat !== undefined && this.lng !== undefined) {
        return this.lat + ',' + this.lng;
      }
      return undefined;
    }
  }]);

  return OrsInput;
}();

exports.default = OrsInput;