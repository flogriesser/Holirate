{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/react/Holirate/src/components/Quiz.js\";\n\n/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 10:28:56 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-06-11 21:18:01\n */\nimport React, { Component } from 'react';\nimport { QuizData } from './Data/Fragen';\nimport './circle.css';\nimport { LoadScript } from \"@react-google-maps/api\"; //import { BasicMap } from \"./Maps/OSM/OSMtest\";\n\nimport Map from \"./Maps/maps\";\nimport Singlequestion from './SingleQuestion/singleQuestion';\nimport QuizEnds from './Score/quizEnd';\nimport Car from './Maps/car';\nimport Flight from './Flight/flight';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userAnswer: null,\n      //current users answer\n      type: \"single\",\n      //question Type\n      currentIndex: 0,\n      //current questions index\n      options: [],\n      //the options\n      values: null,\n      //Values of Single or Multiple choice\n      tipps: null,\n      ChoosenTipps: [],\n      quizEnd: false,\n      score: 0,\n      distance: 0,\n      TravelMode: 'Car',\n      co2: 0,\n\n      /*num_backpags:0,*/\n\n      /*TODO not needed right now*/\n\n      /*kilo_backpags: 0,*/\n\n      /*TODO not needed right now*/\n      carType: 0,\n      carPower: 0,\n      directions: null,\n      bounds: null\n    };\n\n    this.loadQuiz = () => {\n      const {\n        currentIndex\n      } = this.state; //get the current index\n\n      this.setState(() => {\n        return {\n          question: QuizData[currentIndex].question,\n          type: QuizData[currentIndex].type,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values,\n          tipps: QuizData[currentIndex].tipps,\n          distance: 0,\n          TravelMode: \"Car\"\n        };\n      });\n    };\n\n    this.setDistance = distanceKM => {\n      this.setState({\n        distance: distanceKM\n      });\n    };\n\n    this.nextQuestionHander = () => {\n      const {\n        currentIndex\n      } = this.state;\n\n      if (currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      } else {\n        this.setState({\n          currentIndex: this.state.currentIndex + 1\n        });\n      }\n    };\n\n    this.afterMap = () => {\n      //var distanceKM = document.getElementById(\"Distance\").value;\n      //console.log(distanceKM)\n      this.setState({\n        currentIndex: this.state.currentIndex + 1 //distance: distanceKM\n\n      });\n    };\n\n    this.callbackCarType = index => {\n      this.setState({\n        carType: index\n      });\n      this.state.ChoosenTipps.push(QuizData[this.state.currentIndex].tipps[index]);\n      this.nextQuestionHander();\n    };\n\n    this.callbackCarPower = index => {\n      this.setState({\n        carPower: index\n      });\n      this.state.ChoosenTipps.push(QuizData[this.state.currentIndex].tipps[index]);\n      this.nextQuestionHander();\n    };\n\n    this.callbackSingleQuestion = (index, points, Travelmode) => {\n      const {\n        score,\n        currentIndex\n      } = this.state;\n\n      if (Travelmode === null) {\n        this.setState({\n          score: score + points\n        });\n      } else {\n        this.setState({\n          TravelMode: Travelmode\n        });\n      }\n\n      this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n      this.nextQuestionHander();\n    };\n\n    this.callbackFlight = distance => {};\n\n    this.callbackMaps = distance => {\n      this.setState({\n        distance: distance\n      });\n    };\n\n    this.finishHandler = () => {\n      if (this.state.currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      }\n    };\n  }\n\n  //Load the quiz once the component mounts\n  componentDidMount() {\n    this.loadQuiz();\n  } //Update the component\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      currentIndex\n    } = this.state;\n\n    if (this.state.currentIndex !== prevState.currentIndex) {\n      this.setState(() => {\n        return {\n          type: QuizData[currentIndex].type,\n          question: QuizData[currentIndex].question,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values\n        };\n      });\n    }\n  }\n  /*componentDidUpdate*/\n\n\n  render() {\n    const {\n      quizEnd,\n      currentIndex\n    } = this.state; //get the current state     \n\n    var type = QuizData[currentIndex].type;\n\n    if (quizEnd) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(QuizEnds, {\n          state: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (type === \"car\" && this.state.TravelMode === \"Car\") {\n      return /*#__PURE__*/_jsxDEV(Car, {\n        state: this.state,\n        callbackCarType: this.callbackCarType,\n        callbackCarPower: this.callbackCarPower\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }, this);\n    } else if (type === \"flight\" && this.state.TravelMode === \"Flight\") {\n      return /*#__PURE__*/_jsxDEV(Flight, {\n        score: this.state.score,\n        currentIndex: this.state.currentIndex,\n        question: this.state.question,\n        callbackFlight: this.props.callbackFlight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"transport\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Map, {\n          state: this.state,\n          callbackMaps: this.callbackMaps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"single\") {\n      return /*#__PURE__*/_jsxDEV(Singlequestion, {\n        state: this.state,\n        callbackSingleQuestion: this.callbackSingleQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this);\n    } else {\n      /*If none of the above take next question*/\n\n      /*FIXME Better solution than return null!*/\n      this.setState({\n        currentIndex: this.state.currentIndex + 1\n      });\n      return null;\n    }\n  }\n  /*render*/\n\n\n}\n/*Quiz*/\n\n/*Maps:\n\n                <div>\n                    <LoadScript googleMapsApiKey={key} libraries={lib}>\n                        <Map    score={this.state.score} \n                                currentIndex={this.state.currentIndex} \n                                question={this.state.question} \n                                TravelMode={this.state.TravelMode}\n                                setDistance={this.setDistance}/>\n                    </LoadScript>\n                    <br></br>\n                    <div className=\"OwnSubmit\"\n                            onClick={() => this.afterMap()}>\n                        Submit</div>\n            </div > )\n  \n*/\n\n\nexport default Quiz;","map":{"version":3,"sources":["/home/flo/Projects/react/Holirate/src/components/Quiz.js"],"names":["React","Component","QuizData","LoadScript","Map","Singlequestion","QuizEnds","Car","Flight","lib","key","Quiz","state","userAnswer","type","currentIndex","options","values","tipps","ChoosenTipps","quizEnd","score","distance","TravelMode","co2","carType","carPower","directions","bounds","loadQuiz","setState","question","setDistance","distanceKM","nextQuestionHander","length","afterMap","callbackCarType","index","push","callbackCarPower","callbackSingleQuestion","points","Travelmode","callbackFlight","callbackMaps","finishHandler","componentDidMount","componentDidUpdate","prevProps","prevState","render","props"],"mappings":"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","sourcesContent":["/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 10:28:56 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-06-11 21:18:01\n */\nimport React, { Component } from 'react'\nimport { QuizData } from './Data/Fragen';\nimport './circle.css';\nimport { LoadScript } from \"@react-google-maps/api\";\n\n//import { BasicMap } from \"./Maps/OSM/OSMtest\";\n\nimport Map from \"./Maps/maps\";\n\nimport Singlequestion from './SingleQuestion/singleQuestion';\nimport QuizEnds from './Score/quizEnd';\nimport Car from './Maps/car';\nimport Flight from './Flight/flight';\n\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\n\nclass Quiz extends Component {\n\n    state = {\n        userAnswer: null,    //current users answer\n        type: \"single\",         //question Type\n        currentIndex: 0,     //current questions index\n        options: [],        //the options\n        values: null,         //Values of Single or Multiple choice\n        tipps: null,\n        ChoosenTipps: [],\n        quizEnd: false,\n        score: 0,\n        distance: 0,\n        TravelMode: 'Car',\n        co2: 0,\n\n        /*num_backpags:0,*/    /*TODO not needed right now*/\n        /*kilo_backpags: 0,*/  /*TODO not needed right now*/\n\n\n        carType: 0,\n        carPower: 0,\n\n\n        directions: null,\n        bounds: null\n    }\n\n\n    //Component that holds the current quiz\n    loadQuiz = () => {\n        const { currentIndex } = this.state //get the current index\n        this.setState(() => {\n            return {\n                question: QuizData[currentIndex].question,\n                type: QuizData[currentIndex].type,\n                options: QuizData[currentIndex].options,\n                values: QuizData[currentIndex].values,\n                tipps: QuizData[currentIndex].tipps,\n                distance: 0,\n                TravelMode: \"Car\"\n            }\n        }\n        )\n    }\n    \n    setDistance = (distanceKM) => {\n        this.setState({\n            distance: distanceKM\n        })\n    }\n\n    //Handles Click event for the next button\n    nextQuestionHander = () => {\n        const {currentIndex} = this.state;\n        if (currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        } else {\n            this.setState({\n                currentIndex: this.state.currentIndex + 1\n            })\n        }\n    }\n\n    afterMap = () => {\n        //var distanceKM = document.getElementById(\"Distance\").value;\n        //console.log(distanceKM)\n        this.setState({\n            currentIndex: this.state.currentIndex + 1,\n            //distance: distanceKM\n        })\n    }\n\n    //Load the quiz once the component mounts\n    componentDidMount() {\n        this.loadQuiz();\n    }\n\n    //Update the component\n    componentDidUpdate(prevProps, prevState) {\n        const { currentIndex } = this.state;\n        if (this.state.currentIndex !== prevState.currentIndex) {\n            this.setState(() => {\n                return {\n                    type: QuizData[currentIndex].type,\n                    question: QuizData[currentIndex].question,\n                    options: QuizData[currentIndex].options,\n                    values: QuizData[currentIndex].values\n                }\n            });\n\n        }\n    }/*componentDidUpdate*/\n\n    callbackCarType = (index) =>{\n        this.setState({\n            carType: index\n        })\n\n        this.state.ChoosenTipps.push(QuizData[this.state.currentIndex].tipps[index]);\n        this.nextQuestionHander();\n    }\n\n    callbackCarPower = (index) =>{\n        this.setState({\n            carPower: index\n        })\n\n        this.state.ChoosenTipps.push(QuizData[this.state.currentIndex].tipps[index]);\n        this.nextQuestionHander();\n    }\n\n    callbackSingleQuestion = (index, points, Travelmode) => {\n        const {score, currentIndex} = this.state;\n        if(Travelmode === null){\n            this.setState({\n                score: score + points\n            });\n        }else{\n            this.setState({\n                TravelMode: Travelmode\n            })\n        }\n\n        this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n\n        this.nextQuestionHander();\n    }\n\n    callbackFlight = (distance) =>{\n        \n    }\n    \n    callbackMaps = (distance) => {\n        this.setState({\n            distance: distance\n        })\n    }\n\n    //Responds to the click of the finish button\n    finishHandler = () => {\n        if (this.state.currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        }\n\n    }\n\n\n    render() {\n        const {quizEnd, currentIndex} = this.state //get the current state     \n        var type = QuizData[currentIndex].type;\n\n        if (quizEnd) {\n            return (\n                <div>\n                    <QuizEnds state={this.state}/>\n                </div>\n            )\n        }\n        \n\n        if (type === \"car\" && this.state.TravelMode === \"Car\"){\n            return(\n                    <Car    state={this.state}\n                            callbackCarType={this.callbackCarType} \n                            callbackCarPower={this.callbackCarPower}/>\n            )\n        }else if (type === \"flight\" && this.state.TravelMode === \"Flight\"){\n            return(\n                <Flight score={this.state.score} \n                currentIndex={this.state.currentIndex} \n                question={this.state.question} \n                callbackFlight={this.props.callbackFlight}/>\n                )\n        } else if (type === \"transport\") {\n            return (\n                <div>\n                    <Map    state={this.state} \n                            callbackMaps={this.callbackMaps}/>\n                    <br></br>\n                </div > )   \n        }else if(type === \"single\") {\n            return(\n                <Singlequestion state={this.state} callbackSingleQuestion={this.callbackSingleQuestion}/>\n            )\n        }else{\n            /*If none of the above take next question*/\n            /*FIXME Better solution than return null!*/\n            this.setState({\n                currentIndex: this.state.currentIndex +1\n            })\n            return null;\n        }\n    }/*render*/\n\n}/*Quiz*/\n\n\n/*Maps:\n\n                <div>\n                    <LoadScript googleMapsApiKey={key} libraries={lib}>\n                        <Map    score={this.state.score} \n                                currentIndex={this.state.currentIndex} \n                                question={this.state.question} \n                                TravelMode={this.state.TravelMode}\n                                setDistance={this.setDistance}/>\n                    </LoadScript>\n                    <br></br>\n                    <div className=\"OwnSubmit\"\n                            onClick={() => this.afterMap()}>\n                        Submit</div>\n            </div > )\n  \n*/\n\n\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}