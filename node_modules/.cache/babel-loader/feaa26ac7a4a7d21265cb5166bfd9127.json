{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/HolirateFolder/react/Holirate/src/components/Quiz.js\";\nimport React, { Component } from 'react';\nimport { QuizData } from './Data/Fragen';\nimport './circle.css'; //import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\n\nimport { LoadScript } from \"@react-google-maps/api\";\nimport Map from \"./Maps/maps\";\nimport Singlequestion from './SingleQuestion/singleQuestion';\nimport QuizEnds from './Score/quizEnd';\nimport Number from './Number/Number';\nimport Car from './Maps/car';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userAnswer: null,\n      //current users answer\n      type: \"single\",\n      //question Type\n      currentIndex: 0,\n      //current questions index\n      options: [],\n      //the options\n      values: null,\n      //Values of Single or Multiple choice\n      tipps: null,\n      ChoosenTipps: [],\n      quizEnd: false,\n      score: 0,\n      distance: 0,\n      TravelMode: 'Car',\n      co2: 0,\n      adults: 0,\n      children: 0,\n      num_backpags: 0,\n      kilo_backpags: 0,\n      days: 0,\n      weeks: 0,\n      carType: 0,\n      carPower: 0,\n      directions: null,\n      bounds: null\n    };\n\n    this.loadQuiz = () => {\n      const {\n        currentIndex\n      } = this.state; //get the current index\n\n      this.setState(() => {\n        return {\n          question: QuizData[currentIndex].question,\n          type: QuizData[currentIndex].type,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values,\n          tipps: QuizData[currentIndex].tipps,\n          distance: 0,\n          TravelMode: \"Car\"\n        };\n      });\n    };\n\n    this.nextQuestionHander = () => {\n      const {\n        currentIndex\n      } = this.state;\n\n      if (currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      } else {\n        this.setState({\n          currentIndex: this.state.currentIndex + 1\n        });\n      }\n    };\n\n    this.afterMap = () => {\n      //var distanceKM = document.getElementById(\"Distance\").value;\n      //console.log(distanceKM)\n      console.log(this.state.distance);\n      this.setState({\n        currentIndex: this.state.currentIndex + 1 //distance: distanceKM\n\n      });\n    };\n\n    this.callbackCarType = index => {\n      this.setState({\n        carType: answer\n      });\n      this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n      this.nextQuestionHander();\n    };\n\n    this.callbackCarPower = index => {\n      this.setState({\n        carPower: index\n      });\n      this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n      this.nextQuestionHander();\n    };\n\n    this.callbackSingleQuestion = (index, points, Travelmode) => {\n      const {\n        score,\n        currentIndex\n      } = this.state;\n\n      if (Travelmode === null) {\n        this.setState({\n          score: score + points\n        });\n      } else {\n        this.setState({\n          TravelMode: Travelmode\n        });\n      }\n\n      this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n      this.nextQuestionHander();\n    };\n\n    this.callbackPeople = (Adults, Childs) => {\n      this.setState({\n        adults: Adults,\n        children: Childs,\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.callbackDuration = (days, weeks) => {\n      this.setState({\n        days: days,\n        weeks: weeks,\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.callbackBaggage = (number, kilo) => {\n      this.setState({\n        num_baggage: 0,\n        kilo_baggage: 0,\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.finishHandler = () => {\n      if (this.state.currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      }\n    };\n  }\n\n  //Load the quiz once the component mounts\n  componentDidMount() {\n    this.loadQuiz();\n  } //Update the component\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      currentIndex\n    } = this.state;\n\n    if (this.state.currentIndex !== prevState.currentIndex) {\n      this.setState(() => {\n        return {\n          type: QuizData[currentIndex].type,\n          question: QuizData[currentIndex].question,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values\n        };\n      });\n    }\n  }\n  /*componentDidUpdate*/\n\n\n  render() {\n    const {\n      quizEnd,\n      currentIndex\n    } = this.state; //get the current state     \n\n    console.log(this.state.TravelMode);\n    var type = QuizData[currentIndex].type;\n\n    if (quizEnd) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(QuizEnds, {\n          state: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (type === \"car\" && this.state.TravelMode === \"Car\") {\n      return /*#__PURE__*/_jsxDEV(Car, {\n        state: this.state,\n        callbackCarType: this.callbackCarType,\n        callbackCarPower: this.callbackCarPower\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this);\n    } else if (type === \"flight\" && this.state.TravelMode === \"Flight\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Flight\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"number\") {\n      return /*#__PURE__*/_jsxDEV(Number, {\n        state: this.state,\n        callbackPeople: this.callbackPeople,\n        callbackDuration: this.callbackDuration,\n        callbackBaggage: this.callbackBaggage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this);\n    } else if (type === \"transport\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(LoadScript, {\n          googleMapsApiKey: key,\n          libraries: lib,\n          children: /*#__PURE__*/_jsxDEV(Map, {\n            score: this.state.score,\n            currentIndex: this.state.currentIndex,\n            question: this.state.question,\n            Travelmode: this.state.TravelMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"OwnSubmit\",\n          onClick: () => this.afterMap(),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"single\") {\n      return /*#__PURE__*/_jsxDEV(Singlequestion, {\n        state: this.state,\n        callbackSingleQuestion: this.callbackSingleQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this);\n    } else {\n      /*If none of the above take next question*/\n      this.setState({\n        currentIndex: this.state.currentIndex + 1\n      });\n      return null;\n    }\n  }\n  /*render*/\n\n\n}\n/*Quiz*/\n\n\nQuiz.setDistance = distanceKM => {\n  Quiz.setState({\n    distance: distanceKM\n  });\n};\n\nexport default Quiz;","map":{"version":3,"sources":["/home/flo/Projects/HolirateFolder/react/Holirate/src/components/Quiz.js"],"names":["React","Component","QuizData","LoadScript","Map","Singlequestion","QuizEnds","Number","Car","lib","key","Quiz","state","userAnswer","type","currentIndex","options","values","tipps","ChoosenTipps","quizEnd","score","distance","TravelMode","co2","adults","children","num_backpags","kilo_backpags","days","weeks","carType","carPower","directions","bounds","loadQuiz","setState","question","nextQuestionHander","length","afterMap","console","log","callbackCarType","index","answer","push","callbackCarPower","callbackSingleQuestion","points","Travelmode","callbackPeople","Adults","Childs","callbackDuration","callbackBaggage","number","kilo","num_baggage","kilo_baggage","finishHandler","componentDidMount","componentDidUpdate","prevProps","prevState","render","setDistance","distanceKM"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { QuizData } from './Data/Fragen';\nimport './circle.css';\n//import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\nimport { LoadScript } from \"@react-google-maps/api\";\nimport Map from \"./Maps/maps\";\n\nimport Singlequestion from './SingleQuestion/singleQuestion';\nimport QuizEnds from './Score/quizEnd';\nimport Number from './Number/Number';\nimport Car from './Maps/car';\n\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\n\nclass Quiz extends Component {\n\n    state = {\n        userAnswer: null,    //current users answer\n        type: \"single\",         //question Type\n        currentIndex: 0,     //current questions index\n        options: [],        //the options\n        values: null,         //Values of Single or Multiple choice\n        tipps: null,\n        ChoosenTipps: [],\n        quizEnd: false,\n        score: 0,\n        distance: 0,\n        TravelMode: 'Car',\n        co2: 0,\n\n        adults: 0,\n        children: 0,\n\n        num_backpags:0,\n        kilo_backpags: 0,\n\n        days: 0,\n        weeks: 0,\n\n        carType: 0,\n        carPower: 0,\n\n\n        directions: null,\n        bounds: null\n    }\n\n\n    //Component that holds the current quiz\n    loadQuiz = () => {\n        const { currentIndex } = this.state //get the current index\n        this.setState(() => {\n            return {\n                question: QuizData[currentIndex].question,\n                type: QuizData[currentIndex].type,\n                options: QuizData[currentIndex].options,\n                values: QuizData[currentIndex].values,\n                tipps: QuizData[currentIndex].tipps,\n                distance: 0,\n                TravelMode: \"Car\"\n            }\n        }\n        )\n    }\n    \n    static setDistance = (distanceKM) => {\n        this.setState({\n            distance: distanceKM\n        })\n    }\n\n    //Handles Click event for the next button\n    nextQuestionHander = () => {\n        const {currentIndex} = this.state;\n        if (currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        } else {\n            this.setState({\n                currentIndex: this.state.currentIndex + 1\n            })\n        }\n    }\n\n    afterMap = () => {\n        //var distanceKM = document.getElementById(\"Distance\").value;\n        //console.log(distanceKM)\n        console.log(this.state.distance);\n        this.setState({\n            currentIndex: this.state.currentIndex + 1,\n            //distance: distanceKM\n        })\n    }\n\n    //Load the quiz once the component mounts\n    componentDidMount() {\n        this.loadQuiz();\n    }\n\n    //Update the component\n    componentDidUpdate(prevProps, prevState) {\n        const { currentIndex } = this.state;\n        if (this.state.currentIndex !== prevState.currentIndex) {\n            this.setState(() => {\n                return {\n                    type: QuizData[currentIndex].type,\n                    question: QuizData[currentIndex].question,\n                    options: QuizData[currentIndex].options,\n                    values: QuizData[currentIndex].values\n                }\n            });\n\n        }\n    }/*componentDidUpdate*/\n\n    callbackCarType = (index) =>{\n        this.setState({\n            carType: answer\n        })\n\n        this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n        this.nextQuestionHander();\n    }\n\n    callbackCarPower = (index) =>{\n        this.setState({\n            carPower: index\n        })\n\n        this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n        this.nextQuestionHander();\n    }\n\n    callbackSingleQuestion = (index, points, Travelmode) => {\n        const {score, currentIndex} = this.state;\n        if(Travelmode === null){\n            this.setState({\n                score: score + points\n            });\n        }else{\n            this.setState({\n                TravelMode: Travelmode\n            })\n        }\n\n        this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n\n        this.nextQuestionHander();\n    }\n\n    callbackPeople = (Adults, Childs) =>{\n\n        this.setState({\n            adults: Adults,\n            children: Childs,\n            currentIndex: this.state.currentIndex + 1,\n        })\n    }\n\n    callbackDuration = (days, weeks) =>{\n\n        this.setState({\n            days: days,\n            weeks: weeks,\n            currentIndex: this.state.currentIndex + 1,\n        })\n    }\n\n\n    callbackBaggage = (number, kilo) =>{\n\n        this.setState({\n            num_baggage:0,\n            kilo_baggage: 0,\n            currentIndex: this.state.currentIndex + 1,\n        })\n\n    }\n\n    //Responds to the click of the finish button\n    finishHandler = () => {\n        if (this.state.currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        }\n\n    }\n\n\n    render() {\n        const {quizEnd, currentIndex} = this.state //get the current state     \n        console.log(this.state.TravelMode);\n        var type = QuizData[currentIndex].type;\n\n        if (quizEnd) {\n            return (\n                <div>\n                    <QuizEnds state={this.state}/>\n                </div>\n            )\n        }\n        \n\n        if (type === \"car\" && this.state.TravelMode === \"Car\"){\n            return(\n                    <Car    state={this.state}\n                            callbackCarType={this.callbackCarType} \n                            callbackCarPower={this.callbackCarPower}/>\n            )\n        }else if (type === \"flight\" && this.state.TravelMode === \"Flight\"){\n            return(\n                <div>\n                    <h1>Flight</h1>\n                </div>\n            )\n        } else if (type === \"number\") {\n            return (\n                    <Number state={this.state}  callbackPeople={this.callbackPeople} \n                                                callbackDuration={this.callbackDuration} \n                                                callbackBaggage={this.callbackBaggage}\n                    />                \n                )\n        } else if (type === \"transport\") {\n            return (\n                <div>\n                    <LoadScript googleMapsApiKey={key} libraries={lib}>\n                        <Map score={this.state.score} currentIndex={this.state.currentIndex} question={this.state.question} Travelmode={this.state.TravelMode}/>\n                    </LoadScript>\n                    <br></br>\n                    <div className=\"OwnSubmit\"\n                            onClick={() => this.afterMap()}>\n                        Submit</div>\n            </div > )\n        }else if(type === \"single\") {\n            return(\n                <Singlequestion state={this.state} callbackSingleQuestion={this.callbackSingleQuestion}/>\n            )\n        }else{\n            /*If none of the above take next question*/\n            this.setState({\n                currentIndex: this.state.currentIndex +1\n            })\n            return null;\n        }\n    }/*render*/\n\n}/*Quiz*/\n\n\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}