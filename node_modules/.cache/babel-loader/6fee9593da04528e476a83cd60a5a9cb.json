{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/react/Holirate/src/components/SingleQuestion/singleQuestion.js\",\n    _s = $RefreshSig$();\n\n/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 17:23:53 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-05-29 17:35:49\n */\nimport React from \"react\";\nimport Radio from '@material-ui/core/Radio';\nimport Button from '@material-ui/core/Button';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport '@fontsource/roboto';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { BorderLinearProgress, ScoreHeader, theme } from \"../stylesUI\";\nimport { QuizData } from '../Data/Fragen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Singlequestion() {\n  _s();\n\n  const [value, setValue] = React.useState('');\n  const [error, setError] = React.useState(false);\n  const [helperText, setHelperText] = React.useState('Choose wisely');\n\n  const handleRadioChange = event => {\n    setValue(event.target.value);\n    setHelperText(' ');\n    setError(false);\n  }; //Check the answer\n\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const {\n      currentIndex\n    } = this.props.state;\n    var Travelmode = null;\n    var points = 0;\n    console.log(index);\n    var index = parseInt(value);\n\n    if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\n      Travelmode = \"Fligth\";\n    } else if (QuizData[currentIndex].options[index] === \"Auto\") {\n      Travelmode = \"Car\";\n    } else if (QuizData[currentIndex].options[index] === \"Zug\") {\n      Travelmode = \"Train\";\n    } else {\n      points = QuizData[currentIndex].values[index];\n    }\n\n    this.props.callbackSingleQuestion(index, points, Travelmode);\n  };\n  /*checkAnswer*/\n\n\n  const {\n    question,\n    options,\n    currentIndex,\n    score\n  } = this.state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ScoreHeader, {\n      score: score,\n      currentIndex: currentIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        component: \"fieldset\",\n        error: error,\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          component: \"legend\",\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n          \"aria-label\": \"quiz\",\n          name: \"quiz\",\n          value: value,\n          onChange: handleRadioChange,\n          children: options.map((option, index) =>\n          /*#__PURE__*/\n          //for each option, new paragrap\n          _jsxDEV(FormControlLabel, {\n            value: index + 1,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 42\n            }, this),\n            label: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n          children: helperText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"outlined\",\n          color: \"primary\",\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Singlequestion, \"KMo3LogVNB2IFqk7plFYk/8WzdQ=\");\n\n_c = Singlequestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"Singlequestion\");","map":{"version":3,"sources":["/home/flo/Projects/react/Holirate/src/components/SingleQuestion/singleQuestion.js"],"names":["React","Radio","Button","RadioGroup","FormControlLabel","FormLabel","FormControl","FormHelperText","BorderLinearProgress","ScoreHeader","theme","QuizData","Singlequestion","value","setValue","useState","error","setError","helperText","setHelperText","handleRadioChange","event","target","handleSubmit","preventDefault","currentIndex","props","state","Travelmode","points","console","log","index","parseInt","options","values","callbackSingleQuestion","question","score","map","option"],"mappings":"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","sourcesContent":["/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 17:23:53 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-05-29 17:35:49\n */\n\nimport React from \"react\";\nimport Radio from '@material-ui/core/Radio';\nimport Button from '@material-ui/core/Button';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel'\nimport FormControl from '@material-ui/core/FormControl';\nimport '@fontsource/roboto';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { BorderLinearProgress, ScoreHeader, theme } from \"../stylesUI\";\n\nimport { QuizData } from '../Data/Fragen';\n\n\n\n\n\nexport default function Singlequestion() {\n\n\n    const [value, setValue] = React.useState('');\n    const [error, setError] = React.useState(false);\n    const [helperText, setHelperText] = React.useState('Choose wisely');\n  \n    const handleRadioChange = (event) => {\n      setValue(event.target.value);\n      setHelperText(' ');\n      setError(false);\n    };\n\n\n\n    //Check the answer\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        const { currentIndex } = this.props.state;\n        var Travelmode = null;\n        var points = 0;\n        console.log(index);\n        var index = parseInt(value);\n\n        if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\n            Travelmode = \"Fligth\";\n        } else if (QuizData[currentIndex].options[index] === \"Auto\") {\n            Travelmode = \"Car\";\n        } else if (QuizData[currentIndex].options[index] === \"Zug\") {\n            Travelmode = \"Train\";\n        } else {\n            points = QuizData[currentIndex].values[index];\n        }\n\n\n        this.props.callbackSingleQuestion(index, points, Travelmode);\n    }/*checkAnswer*/\n\n\n\n    const { question, options, currentIndex, score } = this.state;\n\n \n    return (\n        <div>\n        <ScoreHeader score={score} currentIndex={currentIndex} />\n        <form onSubmit={handleSubmit}>\n          <FormControl component=\"fieldset\" error={error}>\n            <FormLabel component=\"legend\">{question}</FormLabel>\n            <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={value} onChange={handleRadioChange}>\n            {\n                        options.map((option, index) => (  //for each option, new paragrap\n                            <FormControlLabel value={index + 1}\n                                control={<Radio />}\n                                label={option} />\n                        ))\n                    }\n            </RadioGroup>\n            <FormHelperText>{helperText}</FormHelperText>\n            <Button type=\"submit\" variant=\"outlined\" color=\"primary\">\n              Next\n            </Button>\n          </FormControl>\n        </form>\n        </div>\n      );\n}\n"]},"metadata":{},"sourceType":"module"}