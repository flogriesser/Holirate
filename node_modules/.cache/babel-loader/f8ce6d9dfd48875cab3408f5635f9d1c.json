{"ast":null,"code":"import _classCallCheck from\"/home/flo/Projects/react/Holirate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/flo/Projects/react/Holirate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/flo/Projects/react/Holirate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/flo/Projects/react/Holirate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 10:28:56 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-06-11 21:43:08\n */import React,{Component}from'react';import{QuizData}from'./Data/Fragen';import'./circle.css';import Map from\"./Maps/maps\";import Singlequestion from'./SingleQuestion/singleQuestion';import QuizEnds from'./Score/quizEnd';import Car from'./Maps/car';import Flight from'./Flight/flight';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Quiz=/*#__PURE__*/function(_Component){_inherits(Quiz,_Component);var _super=_createSuper(Quiz);function Quiz(){var _this;_classCallCheck(this,Quiz);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={userAnswer:null,//current users answer\ntype:\"single\",//question Type\ncurrentIndex:0,//current questions index\noptions:[],//the options\nvalues:null,//Values of Single or Multiple choice\ntipps:null,ChoosenTipps:[],ChoosenHeadlines:[],quizEnd:false,score:0,distance:0,TravelMode:'Car',co2:0,/*num_backpags:0,*/ /*TODO not needed right now*/ /*kilo_backpags: 0,*/ /*TODO not needed right now*/carType:0,carPower:0,directions:null,bounds:null};_this.loadQuiz=function(){var currentIndex=_this.state.currentIndex;//get the current index\n_this.setState(function(){return{question:QuizData[currentIndex].question,type:QuizData[currentIndex].type,options:QuizData[currentIndex].options,values:QuizData[currentIndex].values,tipps:QuizData[currentIndex].tipps,distance:0,TravelMode:\"Car\"};});};_this.setDistance=function(distanceKM){_this.setState({distance:distanceKM});};_this.nextQuestionHander=function(){var currentIndex=_this.state.currentIndex;if(currentIndex===QuizData.length-1){_this.setState({quizEnd:true});}else{_this.setState({currentIndex:_this.state.currentIndex+1});}};_this.afterMap=function(){//var distanceKM = document.getElementById(\"Distance\").value;\n//console.log(distanceKM)\n_this.setState({currentIndex:_this.state.currentIndex+1//distance: distanceKM\n});};_this.callbackCarType=function(index){_this.setState({carType:index});/*\n        if(QuizData[this.state.currentIndex].tipps[index].startsWith('Tipp') === false){\n            this.state.ChoosenTipps.push(QuizData[this.state.currentIndex].tipps[index]);\n        }\n        */_this.state.ChoosenTipps.push(QuizData[_this.state.currentIndex].tipps[index]);_this.state.ChoosenHeadlines.push(QuizData[_this.state.currentIndex].headline);console.log(_this.state.ChoosenHeadlines);_this.nextQuestionHander();};_this.callbackCarPower=function(index){_this.setState({carPower:index});_this.state.ChoosenTipps.push(QuizData[_this.state.currentIndex].tipps[index]);_this.state.ChoosenHeadlines.push(QuizData[_this.state.currentIndex].headline);console.log(_this.state.ChoosenHeadlines);_this.nextQuestionHander();};_this.callbackSingleQuestion=function(index,points,Travelmode){var _this$state=_this.state,score=_this$state.score,currentIndex=_this$state.currentIndex;if(Travelmode===null){_this.setState({score:score+points});}else{_this.setState({TravelMode:Travelmode});}_this.state.ChoosenHeadlines.push(QuizData[_this.state.currentIndex].headline);_this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);console.log(_this.state.ChoosenHeadlines);_this.nextQuestionHander();};_this.callbackFlight=function(distance){return 0.369*distance;};_this.callbackMaps=function(distance){_this.setState({distance:distance});_this.nextQuestionHander();};_this.finishHandler=function(){if(_this.state.currentIndex===QuizData.length-1){_this.setState({quizEnd:true});}};return _this;}_createClass(Quiz,[{key:\"componentDidMount\",value://Load the quiz once the component mounts\nfunction componentDidMount(){this.loadQuiz();}//Update the component\n},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){var currentIndex=this.state.currentIndex;if(this.state.currentIndex!==prevState.currentIndex){this.setState(function(){return{type:QuizData[currentIndex].type,question:QuizData[currentIndex].question,options:QuizData[currentIndex].options,values:QuizData[currentIndex].values};});}}/*componentDidUpdate*/},{key:\"render\",value:function render(){var _this$state2=this.state,quizEnd=_this$state2.quizEnd,currentIndex=_this$state2.currentIndex;//get the current state     \nvar type=QuizData[currentIndex].type;if(quizEnd){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(QuizEnds,{state:this.state})});}if(type===\"car\"&&this.state.TravelMode===\"Car\"){return/*#__PURE__*/_jsx(Car,{state:this.state,callbackCarType:this.callbackCarType,callbackCarPower:this.callbackCarPower});}else if(type===\"flight\"&&this.state.TravelMode===\"Flight\"){return/*#__PURE__*/_jsx(Flight,{score:this.state.score,currentIndex:this.state.currentIndex,question:this.state.question,callbackFlight:this.props.callbackFlight});}else if(type===\"transport\"){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Map,{state:this.state,callbackMaps:this.callbackMaps}),/*#__PURE__*/_jsx(\"br\",{})]});}else if(type===\"single\"){return/*#__PURE__*/_jsx(Singlequestion,{state:this.state,callbackSingleQuestion:this.callbackSingleQuestion});}else{/*If none of the above take next question*/ /*FIXME Better solution than return null!*/this.setState({currentIndex:this.state.currentIndex+1});return null;}}/*render*/}]);return Quiz;}(Component);/*Quiz*/export default Quiz;","map":{"version":3,"sources":["/home/flo/Projects/react/Holirate/src/components/Quiz.js"],"names":["React","Component","QuizData","Map","Singlequestion","QuizEnds","Car","Flight","Quiz","state","userAnswer","type","currentIndex","options","values","tipps","ChoosenTipps","ChoosenHeadlines","quizEnd","score","distance","TravelMode","co2","carType","carPower","directions","bounds","loadQuiz","setState","question","setDistance","distanceKM","nextQuestionHander","length","afterMap","callbackCarType","index","push","headline","console","log","callbackCarPower","callbackSingleQuestion","points","Travelmode","callbackFlight","callbackMaps","finishHandler","prevProps","prevState","props"],"mappings":"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","sourcesContent":["/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 10:28:56 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-06-11 21:43:08\n */\nimport React, { Component } from 'react'\nimport { QuizData } from './Data/Fragen';\nimport './circle.css';\n\n\nimport Map from \"./Maps/maps\";\n\nimport Singlequestion from './SingleQuestion/singleQuestion';\nimport QuizEnds from './Score/quizEnd';\nimport Car from './Maps/car';\nimport Flight from './Flight/flight';\n\n\nclass Quiz extends Component {\n\n    state = {\n        userAnswer: null,    //current users answer\n        type: \"single\",         //question Type\n        currentIndex: 0,     //current questions index\n        options: [],        //the options\n        values: null,         //Values of Single or Multiple choice\n        tipps: null,\n        ChoosenTipps: [],\n        ChoosenHeadlines: [],\n        quizEnd: false,\n        score: 0,\n        distance: 0,\n        TravelMode: 'Car',\n        co2: 0,\n\n        /*num_backpags:0,*/    /*TODO not needed right now*/\n        /*kilo_backpags: 0,*/  /*TODO not needed right now*/\n\n\n        carType: 0,\n        carPower: 0,\n\n\n        directions: null,\n        bounds: null\n    }\n\n\n    //Component that holds the current quiz\n    loadQuiz = () => {\n        const { currentIndex } = this.state //get the current index\n        this.setState(() => {\n            return {\n                question: QuizData[currentIndex].question,\n                type: QuizData[currentIndex].type,\n                options: QuizData[currentIndex].options,\n                values: QuizData[currentIndex].values,\n                tipps: QuizData[currentIndex].tipps,\n                distance: 0,\n                TravelMode: \"Car\"\n            }\n        }\n        )\n    }\n    \n    setDistance = (distanceKM) => {\n        this.setState({\n            distance: distanceKM\n        })\n    }\n\n    //Handles Click event for the next button\n    nextQuestionHander = () => {\n        const {currentIndex} = this.state;\n        if (currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        } else {\n            this.setState({\n                currentIndex: this.state.currentIndex + 1\n            })\n        }\n    }\n\n    afterMap = () => {\n        //var distanceKM = document.getElementById(\"Distance\").value;\n        //console.log(distanceKM)\n        this.setState({\n            currentIndex: this.state.currentIndex + 1,\n            //distance: distanceKM\n        })\n    }\n\n    //Load the quiz once the component mounts\n    componentDidMount() {\n        this.loadQuiz();\n    }\n\n    //Update the component\n    componentDidUpdate(prevProps, prevState) {\n        const { currentIndex } = this.state;\n        if (this.state.currentIndex !== prevState.currentIndex) {\n            this.setState(() => {\n                return {\n                    type: QuizData[currentIndex].type,\n                    question: QuizData[currentIndex].question,\n                    options: QuizData[currentIndex].options,\n                    values: QuizData[currentIndex].values\n                }\n            });\n\n        }\n    }/*componentDidUpdate*/\n\n    callbackCarType = (index) =>{\n        this.setState({\n            carType: index\n        })\n        /*\n        if(QuizData[this.state.currentIndex].tipps[index].startsWith('Tipp') === false){\n            this.state.ChoosenTipps.push(QuizData[this.state.currentIndex].tipps[index]);\n        }\n        */\n        this.state.ChoosenTipps.push(QuizData[this.state.currentIndex].tipps[index]);\n        this.state.ChoosenHeadlines.push(QuizData[this.state.currentIndex].headline);\n        console.log(this.state.ChoosenHeadlines);\n        this.nextQuestionHander();\n    }\n\n    callbackCarPower = (index) =>{\n        this.setState({\n            carPower: index\n        })\n\n        this.state.ChoosenTipps.push(QuizData[this.state.currentIndex].tipps[index]);\n        this.state.ChoosenHeadlines.push(QuizData[this.state.currentIndex].headline);\n        console.log(this.state.ChoosenHeadlines);\n        this.nextQuestionHander();\n    }\n\n    callbackSingleQuestion = (index, points, Travelmode) => {\n        const {score, currentIndex} = this.state;\n        if(Travelmode === null){\n            this.setState({\n                score: score + points\n            });\n        }else{\n            this.setState({\n                TravelMode: Travelmode\n            })\n        }\n\n        this.state.ChoosenHeadlines.push(QuizData[this.state.currentIndex].headline);\n        this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n\n        console.log(this.state.ChoosenHeadlines);\n        this.nextQuestionHander();\n    }\n\n    callbackFlight = (distance) =>{\n        return 0.369*distance;\n    }\n    \n    callbackMaps = (distance) =>{\n        this.setState({\n            distance: distance\n        })\n        this.nextQuestionHander();\n    }\n\n    //Responds to the click of the finish button\n    finishHandler = () => {\n        if (this.state.currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        }\n\n    }\n\n\n    render() {\n        const {quizEnd, currentIndex} = this.state //get the current state     \n        var type = QuizData[currentIndex].type;\n\n        if (quizEnd) {\n            return (\n                <div>\n                    <QuizEnds state={this.state}/>\n                </div>\n            )\n        }\n        \n\n        if (type === \"car\" && this.state.TravelMode === \"Car\"){\n            return(\n                    <Car    state={this.state}\n                            callbackCarType={this.callbackCarType} \n                            callbackCarPower={this.callbackCarPower}/>\n            )\n        }else if (type === \"flight\" && this.state.TravelMode === \"Flight\"){\n            return(\n                <Flight score={this.state.score} \n                currentIndex={this.state.currentIndex} \n                question={this.state.question} \n                callbackFlight={this.props.callbackFlight}/>\n                )\n        } else if (type === \"transport\") {\n            return (\n                <div>\n                    <Map    state={this.state} \n                            callbackMaps={this.callbackMaps}/>\n                    <br></br>\n                </div > )   \n        }else if(type === \"single\") {\n            return(\n                <Singlequestion state={this.state} callbackSingleQuestion={this.callbackSingleQuestion}/>\n            )\n        }else{\n            /*If none of the above take next question*/\n            /*FIXME Better solution than return null!*/\n            this.setState({\n                currentIndex: this.state.currentIndex +1\n            })\n            return null;\n        }\n    }/*render*/\n\n}/*Quiz*/\n\n\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}