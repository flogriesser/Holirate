{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/react/Holirate/src/components/Maps/MapsAutocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = {\n  current: null\n};\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2)\n  }\n}));\nexport function MapsAutocomplete(props) {\n  _s();\n\n  const classes = useStyles();\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState('');\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== 'undefined' && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript('https://maps.googleapis.com/maps/api/js?key=AIzaSyAhnK4snkDyXbuxrsf9jzIHDvogeRCkqvU&libraries=places', document.querySelector('head'), 'google-maps');\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = React.useMemo(() => throttle((request, callback) => {\n    autocompleteService.current.getPlacePredictions(request, callback);\n  }, 200), []);\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue\n    }, results => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    id: \"MUI_AUTOCOMPLETE\",\n    style: {\n      width: 300\n    },\n    getOptionLabel: option => typeof option === 'string' ? option : option.description,\n    filterOptions: x => x,\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    filterSelectedOptions: true,\n    value: value,\n    onChange: (event, newValue) => {\n      setOptions(newValue ? [newValue, ...options] : options);\n      setValue(newValue);\n    },\n    onInputChange: (event, newInputValue) => {\n      setInputValue(newInputValue);\n    },\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      label: \"Add a location\",\n      variant: \"outlined\",\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this),\n    renderOption: option => {\n      const matches = option.structured_formatting.main_text_matched_substrings;\n      const parts = parse(option.structured_formatting.main_text, matches.map(match => [match.offset, match.offset + match.length]));\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(LocationOnIcon, {\n            className: classes.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: true,\n          children: [parts.map((part, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontWeight: part.highlight ? 700 : 400\n            },\n            children: part.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"textSecondary\",\n            children: option.structured_formatting.secondary_text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MapsAutocomplete, \"Iv3KBbI2eLX+/NBzRUKP/aFHxUM=\", false, function () {\n  return [useStyles];\n});\n\n_c = MapsAutocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapsAutocomplete\");","map":{"version":3,"sources":["/home/flo/Projects/react/Holirate/src/components/Maps/MapsAutocomplete.js"],"names":["React","TextField","Autocomplete","LocationOnIcon","Grid","Typography","makeStyles","parse","throttle","loadScript","src","position","id","script","document","createElement","setAttribute","appendChild","autocompleteService","current","useStyles","theme","icon","color","palette","text","secondary","marginRight","spacing","MapsAutocomplete","props","classes","value","setValue","useState","inputValue","setInputValue","options","setOptions","loaded","useRef","window","querySelector","fetch","useMemo","request","callback","getPlacePredictions","useEffect","active","google","maps","places","AutocompleteService","undefined","input","results","newOptions","width","option","description","x","event","newValue","newInputValue","params","matches","structured_formatting","main_text_matched_substrings","parts","main_text","map","match","offset","length","part","index","fontWeight","highlight","secondary_text"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport function MapsAutocomplete(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState('');\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== 'undefined' && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript(\n        'https://maps.googleapis.com/maps/api/js?key=AIzaSyAhnK4snkDyXbuxrsf9jzIHDvogeRCkqvU&libraries=places',\n        document.querySelector('head'),\n        'google-maps',\n      );\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions(request, callback);\n      }, 200),\n    [],\n  );\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, (results) => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n\n  return (\n    <Autocomplete\n      id=\"MUI_AUTOCOMPLETE\"\n      style={{ width: 300 }}\n      getOptionLabel={(option) => (typeof option === 'string' ? option : option.description)}\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      includeInputInList\n      filterSelectedOptions\n      value={value}\n      onChange={(event, newValue) => {\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField {...params} label=\"Add a location\" variant=\"outlined\" fullWidth />\n      )}\n      renderOption={(option) => {\n        const matches = option.structured_formatting.main_text_matched_substrings;\n        const parts = parse(\n          option.structured_formatting.main_text,\n          matches.map((match) => [match.offset, match.offset + match.length]),\n        );\n\n        return (\n          <Grid container alignItems=\"center\">\n            <Grid item>\n              <LocationOnIcon className={classes.icon} />\n            </Grid>\n            <Grid item xs>\n              {parts.map((part, index) => (\n                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\n                  {part.text}\n                </span>\n              ))}\n\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                {option.structured_formatting.secondary_text}\n              </Typography>\n            </Grid>\n          </Grid>\n        );\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}