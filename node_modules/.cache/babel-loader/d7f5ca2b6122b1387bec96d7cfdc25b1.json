{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/react/Holirate/src/components/Maps/car.js\";\n\n/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 10:28:59 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-05-29 17:36:52\n */\nimport React from \"react\";\nimport Radio from '@material-ui/core/Radio';\nimport Button from '@material-ui/core/Button';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport '@fontsource/roboto';\nimport { ScoreHeader, theme } from \"../stylesUI\";\nimport Grid from '@material-ui/core/Grid';\nimport { QuizData } from '../Data/Fragen';\nimport { ThemeProvider } from \"@material-ui/core\";\n/*\nconst carPower = [\n    \"Gasoline\",\n    \"Diesel\",\n    \"Electric\",\n    \"Hyprid\",\n    \"Gas\"\n]\n\n\nconst carType ={\n    small,\n    middle: 1,\n    SUV: 2\n}\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Car extends React.Component {\n  constructor() {\n    super();\n\n    this.forceUpdateHandler = () => {\n      this.forceUpdate();\n    };\n\n    this.radioHandler = event => {\n      //console.log(event.target.value);\n      var test = parseInt(event.target.value);\n      this.indexValue = test; //console.log(test);\n\n      this.forceUpdateHandler();\n    };\n\n    this.handleSubmit = (answer, index) => {\n      const {\n        currentIndex\n      } = this.props.state;\n\n      if (QuizData[currentIndex].category === \"type\") {\n        this.props.callbackCarType(index);\n      } else {\n        this.props.callbackCarPower(index);\n      }\n    };\n\n    this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n    this.indexValue = null;\n  }\n\n  /*checkAnswer*/\n  render() {\n    const {\n      question,\n      options,\n      currentIndex,\n      score\n    } = this.props.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ScoreHeader, {\n        score: score,\n        currentIndex: currentIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        maxwidth: \"false\",\n        align: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 12,\n          md: 6,\n          lg: 4,\n          style: {\n            textAlign: 'center',\n            align: 'center',\n            justifyContent: 'center',\n            alignItems: 'center',\n            width: '80%',\n            margin: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            component: \"fieldset\",\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              component: \"legend\",\n              aligncontent: \"center\",\n              children: question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n              name: \"quiz\",\n              value: this.indexValue,\n              onChange: this.radioHandler,\n              children: options.map((option, index) =>\n              /*#__PURE__*/\n              //for each option, new paragrap\n              _jsxDEV(FormControlLabel, {\n                value: index + 1,\n                //for dumb unique key\n                control: /*#__PURE__*/_jsxDEV(Radio, {\n                  color: \"primary\",\n                  checked: this.indexValue === index + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 50\n                }, this),\n                label: option\n              }, index + 1, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(ThemeProvider, {\n              theme: theme,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: this.handleSubmit,\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Car;","map":{"version":3,"sources":["/home/flo/Projects/react/Holirate/src/components/Maps/car.js"],"names":["React","Radio","Button","RadioGroup","FormControlLabel","FormControl","FormLabel","ScoreHeader","theme","Grid","QuizData","ThemeProvider","Car","Component","constructor","forceUpdateHandler","forceUpdate","radioHandler","event","test","parseInt","target","value","indexValue","handleSubmit","answer","index","currentIndex","props","state","category","callbackCarType","callbackCarPower","bind","render","question","options","score","textAlign","align","justifyContent","alignItems","width","margin","map","option"],"mappings":"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","sourcesContent":["/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 10:28:59 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-05-29 17:36:52\n */\n\nimport React from \"react\";\nimport Radio from '@material-ui/core/Radio';\nimport Button from '@material-ui/core/Button';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel'\nimport '@fontsource/roboto';\nimport { ScoreHeader, theme } from \"../stylesUI\";\nimport Grid from '@material-ui/core/Grid';\nimport { QuizData } from '../Data/Fragen';\nimport { ThemeProvider } from \"@material-ui/core\";\n\n/*\nconst carPower = [\n    \"Gasoline\",\n    \"Diesel\",\n    \"Electric\",\n    \"Hyprid\",\n    \"Gas\"\n]\n\n\nconst carType ={\n    small,\n    middle: 1,\n    SUV: 2\n}\n*/\n\nclass Car extends React.Component{\n    constructor() {\n        super();\n        this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n        this.indexValue = null;\n    };\n\n    forceUpdateHandler = () => {\n        this.forceUpdate();\n    };\n\n    radioHandler = (event) => {\n        //console.log(event.target.value);\n        var test = parseInt(event.target.value);\n        this.indexValue = test;\n        //console.log(test);\n        this.forceUpdateHandler();\n    }\n\n\n\n    //Check the answer\n    handleSubmit = (answer, index) => {\n        const { currentIndex } = this.props.state;\n\n        if(QuizData[currentIndex].category === \"type\"){\n            this.props.callbackCarType(index);\n        }\n        else{\n            this.props.callbackCarPower(index);\n        }\n\n    }/*checkAnswer*/\n\n\n\n\n    render() {\n        const {question, options, currentIndex, score} = this.props.state;\n        return (\n            <div>\n            <ScoreHeader score={score} currentIndex={currentIndex} />\n            <Grid container maxwidth=\"false\" align=\"center\" justifyContent=\"center\" alignItems=\"center\" >\n                <Grid item xs={12} sm={12} md={6} lg={4}\n                    style={{\n                        textAlign: 'center', \n                        align: 'center',\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        width: '80%',\n                        margin:'center'\n                    }}\n                >\n                    <FormControl component=\"fieldset\" >\n                        <FormLabel component=\"legend\" aligncontent=\"center\">{question}</FormLabel>\n                        <RadioGroup name=\"quiz\" value={this.indexValue} onChange={this.radioHandler}>\n                            {\n                                options.map((option, index) => (  //for each option, new paragrap\n                                    <FormControlLabel value={index + 1}\n                                        key={index+1}//for dumb unique key\n                                        control={<Radio\n                                            color=\"primary\"\n                                            checked={this.indexValue === (index + 1)} />}\n                                        label={option} />\n                                ))\n                            }\n                        </RadioGroup>\n                        <ThemeProvider theme={theme}>\n                            <Button variant='contained' color='primary' onClick={this.handleSubmit}>\n                                Next\n                            </Button>\n                        </ThemeProvider>\n                    </FormControl>\n                </Grid>\n            </Grid>\n        </div >\n        )\n    }\n}\n\nexport default Car;"]},"metadata":{},"sourceType":"module"}