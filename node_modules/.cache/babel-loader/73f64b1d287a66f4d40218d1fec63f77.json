{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/react/Holirate/src/components/SingleQuestion/singleQuestion.js\";\n\n/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 17:23:53 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-05-29 17:35:49\n */\nimport React from \"react\";\nimport Radio from '@material-ui/core/Radio';\nimport Button from '@material-ui/core/Button';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport '@fontsource/roboto';\nimport { ScoreHeader } from \"../stylesUI\";\nimport { QuizData } from '../Data/Fragen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Singlequestion extends React.Component {\n  constructor() {\n    super();\n\n    this.forceUpdateHandler = () => {\n      this.forceUpdate();\n    };\n\n    this.radioHandler = event => {\n      console.log(event.target.value);\n      var test = parseInt(event.target.value);\n      this.setState({\n        value: test\n      });\n      console.log(test);\n      this.forceUpdateHandler();\n    };\n\n    this.handleSubmit = () => {\n      if (test != null) {\n        const {\n          currentIndex\n        } = this.props.state;\n        var Travelmode = null;\n        var points = 0;\n        var index = test;\n        console.log(index);\n\n        if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\n          Travelmode = \"Fligth\";\n        } else if (QuizData[currentIndex].options[index] === \"Auto\") {\n          Travelmode = \"Car\";\n        } else if (QuizData[currentIndex].options[index] === \"Zug\") {\n          Travelmode = \"Train\";\n        } else {\n          points = QuizData[currentIndex].values[index];\n        }\n\n        this.props.callbackSingleQuestion(index, points, Travelmode);\n      }\n    };\n\n    this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n    state = {\n      indexValue: 0\n    };\n  }\n\n  /*checkAnswer*/\n  render() {\n    const {\n      question,\n      options,\n      currentIndex,\n      score\n    } = this.props.state;\n    console.log(\"test\");\n    console.log(test);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ScoreHeader, {\n        score: score,\n        currentIndex: currentIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        component: \"fieldset\",\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          component: \"legend\",\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n          \"aria-label\": \"quiz\",\n          name: \"quiz\",\n          value: test,\n          onChange: this.radioHandler,\n          children: options.map((option, index) =>\n          /*#__PURE__*/\n          //for each option, new paragrap\n          _jsxDEV(FormControlLabel, {\n            value: index + 1,\n            control: /*#__PURE__*/_jsxDEV(Radio, {\n              checked: test === String(index + 1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 46\n            }, this),\n            label: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"outlined\",\n          color: \"primary\",\n          onClick: this.handleSubmit,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Singlequestion;","map":{"version":3,"sources":["/home/flo/Projects/react/Holirate/src/components/SingleQuestion/singleQuestion.js"],"names":["React","Radio","Button","RadioGroup","FormControlLabel","FormControl","FormLabel","ScoreHeader","QuizData","Singlequestion","Component","constructor","forceUpdateHandler","forceUpdate","radioHandler","event","console","log","target","value","test","parseInt","setState","handleSubmit","currentIndex","props","state","Travelmode","points","index","options","values","callbackSingleQuestion","bind","indexValue","render","question","score","map","option","String"],"mappings":"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","sourcesContent":["/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 17:23:53 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-05-29 17:35:49\n */\n\nimport React from \"react\";\nimport Radio from '@material-ui/core/Radio';\nimport Button from '@material-ui/core/Button';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel'\nimport '@fontsource/roboto';\nimport { ScoreHeader } from \"../stylesUI\";\n\nimport { QuizData } from '../Data/Fragen';\n\n\n\nclass Singlequestion extends React.Component {\n    constructor(){\n        super();\n        this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n        state = {\n            indexValue: 0\n        }\n      };\n\n    forceUpdateHandler = () => {\n        this.forceUpdate();\n      };\n\n    radioHandler = (event) => {\n        console.log(event.target.value);\n        var test = parseInt(event.target.value);\n        this.setState({\n            value: test\n        })\n        console.log(test);\n        this.forceUpdateHandler();\n    }\n\n\n    //Check the answer\n    handleSubmit = () => {\n        if (test != null) {\n            const { currentIndex } = this.props.state;\n            var Travelmode = null;\n            var points = 0;\n            var index = test;\n            console.log(index);\n\n\n            if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\n                Travelmode = \"Fligth\";\n            } else if (QuizData[currentIndex].options[index] === \"Auto\") {\n                Travelmode = \"Car\";\n            } else if (QuizData[currentIndex].options[index] === \"Zug\") {\n                Travelmode = \"Train\";\n            } else {\n                points = QuizData[currentIndex].values[index];\n            }\n\n\n            this.props.callbackSingleQuestion(index, points, Travelmode);\n        }\n    }/*checkAnswer*/\n\n\n\n    render() {\n        const { question, options, currentIndex, score } = this.props.state;\n        console.log(\"test\");\n        console.log(test);\n        return (\n            <div>\n                <ScoreHeader score={score} currentIndex={currentIndex} />\n\n                <FormControl component=\"fieldset\">\n                    <FormLabel component=\"legend\">{question}</FormLabel>\n                    <br></br>\n                    <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={test} onChange={this.radioHandler}>\n                        {\n                            options.map((option, index) => (  //for each option, new paragrap\n                                <FormControlLabel value={index + 1}\n                                    control={<Radio \n                                    checked={test === String(index + 1)}/>}\n                                    label={option} />\n                            ))\n                        }\n                    </RadioGroup>\n                    <Button type=\"submit\" variant=\"outlined\" color=\"primary\" onClick={this.handleSubmit}>\n                        Next\n                    </Button>\n                </FormControl>\n            </div >\n        )\n    }\n}\n\nexport default Singlequestion;"]},"metadata":{},"sourceType":"module"}