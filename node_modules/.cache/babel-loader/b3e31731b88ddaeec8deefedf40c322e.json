{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/react/Holirate/src/components/Score/quizEnd.js\";\n\n/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 10:29:35 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-06-12 08:35:57\n */\nimport { Component } from \"react\";\nimport { carValues } from \"../Data/Data\";\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Box from \"@material-ui/core/Box\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { FormControlLabel } from \"@material-ui/core\";\nimport { ScoreBoard, DataCard, TippsCard } from \"../stylesUI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass QuizEnds extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.calculateCar = (distance, carPower, carType) => {\n      //const {distance, carType, carPower} = this.props.state;\n      var Factor = carValues[carPower][carType];\n      return (Factor * distance).toFixed(0);\n    };\n\n    this.calculateTrain = () => {\n      const {\n        distance\n      } = this.props.state;\n      return (0.032 * distance).toFixed(0);\n    };\n\n    this.calculateFlight = distance => {\n      return (0.369 * distance).toFixed(0);\n    };\n\n    this.calcScore = co2 => {\n      var score = 0;\n      score = 75 - co2 * 75 / 2500;\n\n      if (co2 > 2500) {\n        score = 0;\n      }\n\n      return score;\n    };\n\n    this.compareCo2 = (TravelMode, co2) => {};\n  }\n\n  render() {\n    const {\n      score,\n      distance,\n      ChoosenTipps,\n      ChoosenHeadlines,\n      TravelMode,\n      carPower,\n      carType\n    } = this.props.state;\n    var co2 = 0;\n    var EndScore = score;\n\n    if (TravelMode === 'Car') {\n      co2 = this.calculateCar(distance, carPower, carType);\n    } else if (TravelMode === 'Train') {\n      co2 = this.calculateTrain(distance);\n    } else if (TravelMode === 'Fligth') {\n      co2 = this.calculateFlight(distance);\n    }\n\n    console.log(ChoosenHeadlines);\n    console.log(ChoosenHeadlines[0]);\n    EndScore = (EndScore + this.calcScore(co2)).toFixed(0);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 20,\n        maxwidth: \"false\",\n        align: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        spacing: 12,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          children: \"Dein Holirate Rating ist fertig!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n          EndScore: EndScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 5,\n          sm: 4,\n          md: 4,\n          lg: 4,\n          spacing: 12,\n          children: [/*#__PURE__*/_jsxDEV(DataCard, {\n            Value: distance,\n            Type: \"Kilometer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 5,\n          sm: 4,\n          md: 4,\n          lg: 4,\n          spacing: 12,\n          children: [/*#__PURE__*/_jsxDEV(DataCard, {\n            Value: co2 + \" kg\",\n            Type: \"CO\\xB2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: \"5% 20%\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            xs: 5,\n            sm: 4,\n            md: 4,\n            lg: 4,\n            component: \"h4\",\n            variant: \"h4\",\n            maxwidth: \"80%\",\n            children: \"Hier noch ein paar Tipps f\\xFCr deine Reise:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 20,\n          children: ChoosenTipps.map((tipp, index) =>\n          /*#__PURE__*/\n          //for each option, new paragrap\n          _jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(TippsCard, {\n              Value: ChoosenHeadlines[index],\n              Type: tipp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default QuizEnds;","map":{"version":3,"sources":["/home/flo/Projects/react/Holirate/src/components/Score/quizEnd.js"],"names":["Component","carValues","FormLabel","FormControl","Box","Grid","Typography","FormControlLabel","ScoreBoard","DataCard","TippsCard","QuizEnds","calculateCar","distance","carPower","carType","Factor","toFixed","calculateTrain","props","state","calculateFlight","calcScore","co2","score","compareCo2","TravelMode","render","ChoosenTipps","ChoosenHeadlines","EndScore","console","log","padding","map","tipp","index"],"mappings":"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","sourcesContent":["/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 10:29:35 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-06-12 08:35:57\n */\n\nimport { Component } from \"react\";\nimport { carValues } from \"../Data/Data\";\nimport FormLabel from '@material-ui/core/FormLabel'\nimport FormControl from '@material-ui/core/FormControl';\nimport Box from \"@material-ui/core/Box\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { FormControlLabel } from \"@material-ui/core\";\n\n\n\nimport { ScoreBoard, DataCard, TippsCard } from \"../stylesUI\";\n\n\nclass QuizEnds extends Component {\n    calculateCar = (distance, carPower, carType) => {\n        //const {distance, carType, carPower} = this.props.state;\n        var Factor = carValues[carPower][carType];\n        return (Factor * distance).toFixed(0);\n    }\n\n    calculateTrain = () => {\n        const { distance } = this.props.state;\n        return (0.032 * distance).toFixed(0);\n    }\n    calculateFlight = (distance) => {\n        return (0.369 * distance).toFixed(0);\n    }\n\n    calcScore = (co2) => {\n        var score = 0;\n        score = 75 - co2 * 75 / 2500;\n\n        if (co2 > 2500) {\n            score = 0;\n        }\n        return score;\n    }\n    compareCo2 = (TravelMode, co2) => {\n    }\n\n    render() {\n        const { score, distance, ChoosenTipps, ChoosenHeadlines, TravelMode, carPower, carType } = this.props.state;\n        var co2 = 0;\n        var EndScore = score;\n        if (TravelMode === 'Car') {\n            co2 = this.calculateCar(distance, carPower, carType);\n        }\n        else if (TravelMode === 'Train') {\n            co2 = this.calculateTrain(distance);\n        }\n        else if (TravelMode === 'Fligth') {\n            co2 = this.calculateFlight(distance);\n        }\n        console.log(ChoosenHeadlines);\n        console.log(ChoosenHeadlines[0]);\n        EndScore = (EndScore + this.calcScore(co2)).toFixed(0);\n\n        return (\n            <div>\n                <Grid container spacing={20} maxwidth=\"false\" align=\"center\" justifyContent=\"center\" alignItems=\"center\" spacing={12}>\n                    <Typography variant=\"h4\">Dein Holirate Rating ist fertig!</Typography>\n\n                    <ScoreBoard EndScore={EndScore}></ScoreBoard>\n\n                    <Grid item xs={5} sm={4} md={4} lg={4} spacing={12}>\n                        <DataCard Value={distance} Type=\"Kilometer\"></DataCard>\n                        <br></br>\n                    </Grid>\n                    <Grid item xs={5} sm={4} md={4} lg={4} spacing={12}>\n                        <DataCard Value={co2 + \" kg\"} Type=\"CO²\"></DataCard>\n                        <br></br>\n                    </Grid>\n\n                    <div style={{ padding: \"5% 20%\" }}>\n                    <Typography xs={5} sm={4} md={4} lg={4} component=\"h4\" variant=\"h4\" maxwidth=\"80%\">\n                        Hier noch ein paar Tipps für deine Reise:\n                    </Typography>\n                    </div>\n\n                    <Grid container  spacing={20}>\n                        {\n                            ChoosenTipps.map((tipp, index) => (  //for each option, new paragrap\n                                <Grid item xs={12}>\n                                    <br></br>\n                                    <TippsCard Value={ChoosenHeadlines[index]} Type={tipp} />\n                                    <br></br>\n                                </Grid>\n                            ))\n                        }\n                    </Grid>\n\n                </Grid>\n            </div>\n        )\n    };\n}\n\nexport default QuizEnds;"]},"metadata":{},"sourceType":"module"}