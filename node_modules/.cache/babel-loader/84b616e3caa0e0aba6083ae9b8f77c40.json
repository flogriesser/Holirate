{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/HolirateFolder/react/Holirate/src/components/Quiz.js\";\nimport React, { Component } from 'react';\nimport { QuizData } from './Data/Fragen';\nimport './circle.css'; //import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\n\nimport { LoadScript } from \"@react-google-maps/api\";\nimport Map from \"./Maps/maps\";\nimport Singlequestion from './SingleQuestion/singleQuestion';\nimport QuizEnds from './Score/quizEnd';\nimport Number from './Number/Number';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userAnswer: null,\n      //current users answer\n      type: \"single\",\n      //question Type\n      currentIndex: 0,\n      //current questions index\n      options: [],\n      //the options\n      values: null,\n      //Values of Single or Multiple choice\n      tipps: null,\n      ChoosenTipps: [],\n      quizEnd: false,\n      score: 0,\n      distance: 0,\n      TravelMode: 'Car',\n      co2: 0,\n      adults: 0,\n      children: 0,\n      num_backpags: 0,\n      kilo_backpags: 0,\n      directions: null,\n      bounds: null\n    };\n\n    this.loadQuiz = () => {\n      const {\n        currentIndex\n      } = this.state; //get the current index\n\n      this.setState(() => {\n        return {\n          question: QuizData[currentIndex].question,\n          type: QuizData[currentIndex].type,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values,\n          tipps: QuizData[currentIndex].tipps,\n          distance: 0\n        };\n      });\n    };\n\n    this.nextQuestionHander = () => {\n      const {\n        userAnswer,\n        score\n      } = this.state;\n      this.setState({\n        score: score + userAnswer,\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.afterMap = () => {\n      //var distanceKM = document.getElementById(\"Distance\").value;\n      //console.log(distanceKM)\n      console.log(this.state.distance);\n      this.setState({\n        currentIndex: this.state.currentIndex + 1 //distance: distanceKM\n\n      });\n    };\n\n    this.callbackSingleQuestion = (index, points, Travelmode) => {\n      const {\n        score,\n        currentIndex\n      } = this.state;\n      console.log(points);\n      console.log(index);\n      console.log(Travelmode);\n      console.log(score);\n\n      if (Travelmode === null) {\n        this.setState({\n          score: score + points\n        });\n      } else {\n        this.setState({\n          Travelmode: Travelmode\n        });\n      }\n\n      this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n\n      if (currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      } else {\n        this.setState({\n          currentIndex: this.state.currentIndex + 1\n        });\n      }\n    };\n\n    this.finishHandler = () => {\n      if (this.state.currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      }\n    };\n  }\n\n  //Load the quiz once the component mounts\n  componentDidMount() {\n    this.loadQuiz();\n  } //Update the component\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      currentIndex\n    } = this.state;\n\n    if (this.state.currentIndex !== prevState.currentIndex) {\n      this.setState(() => {\n        return {\n          type: QuizData[currentIndex].type,\n          question: QuizData[currentIndex].question,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values\n        };\n      });\n    }\n  }\n  /*componentDidUpdate*/\n\n\n  callbackPeople(Adults, Childs) {\n    this.setState({\n      adults: Adults,\n      children: Childs\n    });\n  }\n  /*\n  checkNumber = (index) => {\n      const { currentIndex } = this.state;\n      console.log(currentIndex);\n        this.setState({\n          disabled: false,\n          currentIndex: this.state.currentIndex + 1\n      })\n  }\n  */\n  //Responds to the click of the finish button\n\n\n  render() {\n    const {\n      quizEnd,\n      type\n    } = this.state; //get the current state       \n\n    if (quizEnd) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(QuizEnds, {\n          state: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (type === \"single\") {\n      return /*#__PURE__*/_jsxDEV(Singlequestion, {\n        state: this.state,\n        callbackSingleQuestion: this.callbackSingleQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"number\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Number, {\n          state: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"transport\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(LoadScript, {\n          googleMapsApiKey: key,\n          libraries: lib,\n          children: /*#__PURE__*/_jsxDEV(Map, {\n            score: this.state.score,\n            currentIndex: this.state.currentIndex,\n            question: this.state.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"OwnSubmit\",\n          onClick: () => this.afterMap(),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this);\n    }\n  }\n  /*render*/\n\n\n}\n/*Quiz*/\n\n\nQuiz.setDistance = distanceKM => {\n  Quiz.setState({\n    distance: distanceKM\n  });\n};\n\nexport default Quiz;","map":{"version":3,"sources":["/home/flo/Projects/HolirateFolder/react/Holirate/src/components/Quiz.js"],"names":["React","Component","QuizData","LoadScript","Map","Singlequestion","QuizEnds","Number","lib","key","Quiz","state","userAnswer","type","currentIndex","options","values","tipps","ChoosenTipps","quizEnd","score","distance","TravelMode","co2","adults","children","num_backpags","kilo_backpags","directions","bounds","loadQuiz","setState","question","nextQuestionHander","afterMap","console","log","callbackSingleQuestion","index","points","Travelmode","push","length","finishHandler","componentDidMount","componentDidUpdate","prevProps","prevState","callbackPeople","Adults","Childs","render","setDistance","distanceKM"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { QuizData } from './Data/Fragen';\nimport './circle.css';\n//import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\nimport { LoadScript } from \"@react-google-maps/api\";\nimport Map from \"./Maps/maps\";\n\nimport Singlequestion from './SingleQuestion/singleQuestion';\nimport QuizEnds from './Score/quizEnd';\nimport Number from './Number/Number';\n\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\n\nclass Quiz extends Component {\n\n    state = {\n        userAnswer: null,    //current users answer\n        type: \"single\",         //question Type\n        currentIndex: 0,     //current questions index\n        options: [],        //the options\n        values: null,         //Values of Single or Multiple choice\n        tipps: null,\n        ChoosenTipps: [],\n        quizEnd: false,\n        score: 0,\n        distance: 0,\n        TravelMode: 'Car',\n        co2: 0,\n\n        adults: 0,\n        children: 0,\n\n        num_backpags:0,\n        kilo_backpags: 0,\n\n\n        directions: null,\n        bounds: null\n    }\n\n\n    //Component that holds the current quiz\n    loadQuiz = () => {\n        const { currentIndex } = this.state //get the current index\n        this.setState(() => {\n            return {\n                question: QuizData[currentIndex].question,\n                type: QuizData[currentIndex].type,\n                options: QuizData[currentIndex].options,\n                values: QuizData[currentIndex].values,\n                tipps: QuizData[currentIndex].tipps,\n                distance: 0\n            }\n        }\n        )\n    }\n    \n    static setDistance = (distanceKM) => {\n        this.setState({\n            distance: distanceKM\n        })\n    }\n\n    //Handles Click event for the next button\n    nextQuestionHander = () => {\n        const { userAnswer, score } = this.state\n        this.setState({\n            score: score + userAnswer,\n            currentIndex: this.state.currentIndex + 1\n        })\n    }\n\n    afterMap = () => {\n        //var distanceKM = document.getElementById(\"Distance\").value;\n        //console.log(distanceKM)\n        console.log(this.state.distance);\n        this.setState({\n            currentIndex: this.state.currentIndex + 1,\n            //distance: distanceKM\n        })\n    }\n\n    //Load the quiz once the component mounts\n    componentDidMount() {\n        this.loadQuiz();\n    }\n\n    //Update the component\n    componentDidUpdate(prevProps, prevState) {\n        const { currentIndex } = this.state;\n        if (this.state.currentIndex !== prevState.currentIndex) {\n            this.setState(() => {\n                return {\n                    type: QuizData[currentIndex].type,\n                    question: QuizData[currentIndex].question,\n                    options: QuizData[currentIndex].options,\n                    values: QuizData[currentIndex].values\n\n                }\n            });\n\n        }\n    }/*componentDidUpdate*/\n\n\n    callbackSingleQuestion = (index, points, Travelmode) => {\n        const {score, currentIndex} = this.state;\n        console.log(points);\n        console.log(index);\n        console.log(Travelmode);\n        console.log(score);\n        if(Travelmode === null){\n            this.setState({\n                score: score + points\n            });\n        }else{\n            this.setState({\n                Travelmode: Travelmode\n            })\n        }\n\n        this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n\n        if (currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        } else {\n            this.setState({\n                currentIndex: this.state.currentIndex + 1\n            })\n        }\n    }\n\n    callbackPeople(Adults, Childs){\n\n        this.setState({\n            adults: Adults,\n            children: Childs\n        })\n    }\n\n    /*\n    checkNumber = (index) => {\n        const { currentIndex } = this.state;\n        console.log(currentIndex);\n\n\n        this.setState({\n            disabled: false,\n            currentIndex: this.state.currentIndex + 1\n        })\n    }\n*/\n    //Responds to the click of the finish button\n    finishHandler = () => {\n        if (this.state.currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        }\n\n    }\n\n\n    render() {\n        const {quizEnd, type } = this.state //get the current state       \n        if (quizEnd) {\n            return (\n                <div>\n                    <QuizEnds state={this.state}/>\n                </div>\n            )\n        }\n        \n        if(type === \"single\") {\n            return(\n                <Singlequestion state={this.state} callbackSingleQuestion={this.callbackSingleQuestion}/>\n            )\n        } else if (type === \"number\") {\n            return (\n                <div>\n                    <Number state={this.state}/>                \n                </div >\n                )\n        } else if (type === \"transport\") {\n            return (\n                <div>\n                    <LoadScript googleMapsApiKey={key} libraries={lib}>\n                        <Map score={this.state.score} currentIndex={this.state.currentIndex} question={this.state.question}/>\n                    </LoadScript>\n                    <br></br>\n                    <div className=\"OwnSubmit\"\n                            onClick={() => this.afterMap()}>\n                        Submit</div>\n            </div > )\n        }\n    }/*render*/\n\n}/*Quiz*/\n\n\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}