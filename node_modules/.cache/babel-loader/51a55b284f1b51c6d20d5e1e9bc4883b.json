{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/react/Holirate/src/components/SingleQuestion/singleQuestion.js\";\n\n/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 17:23:53 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-05-29 17:35:49\n */\nimport React from \"react\";\nimport Radio from '@material-ui/core/Radio';\nimport Button from '@material-ui/core/Button';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport '@fontsource/roboto';\nimport { ScoreHeader, theme } from \"../stylesUI\";\nimport { QuizData } from '../Data/Fragen';\nimport { ThemeProvider } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Singlequestion extends React.Component {\n  constructor() {\n    super();\n\n    this.forceUpdateHandler = () => {\n      this.forceUpdate();\n    };\n\n    this.radioHandler = event => {\n      //console.log(event.target.value);\n      var test = parseInt(event.target.value);\n      this.indexValue = test; //console.log(test);\n\n      this.forceUpdateHandler();\n    };\n\n    this.handleSubmit = () => {\n      if (this.indexValue != null) {\n        const {\n          currentIndex\n        } = this.props.state;\n        var Travelmode = null;\n        var points = 0;\n        var index = this.indexValue;\n        console.log(index);\n\n        if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\n          Travelmode = \"Fligth\";\n        } else if (QuizData[currentIndex].options[index] === \"Auto\") {\n          Travelmode = \"Car\";\n        } else if (QuizData[currentIndex].options[index] === \"Zug\") {\n          Travelmode = \"Train\";\n        } else {\n          points = QuizData[currentIndex].values[index];\n        }\n\n        this.indexValue = null;\n        this.props.callbackSingleQuestion(index, points, Travelmode);\n      }\n    };\n\n    this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n    this.indexValue = null;\n  }\n\n  /*checkAnswer*/\n  render() {\n    const {\n      question,\n      options,\n      currentIndex,\n      score\n    } = this.props.state; //console.log(\"indexValue\");\n    //console.log(this.indexValue);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n        theme: theme,\n        children: [/*#__PURE__*/_jsxDEV(ScoreHeader, {\n          score: score,\n          currentIndex: currentIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          component: \"fieldset\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            children: question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            \"aria-label\": \"quiz\",\n            name: \"quiz\",\n            value: this.indexValue,\n            onChange: this.radioHandler,\n            children: options.map((option, index) =>\n            /*#__PURE__*/\n            //for each option, new paragrap\n            _jsxDEV(FormControlLabel, {\n              value: index + 1,\n              control: /*#__PURE__*/_jsxDEV(Radio, {\n                checked: this.indexValue === index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 50\n              }, this),\n              label: option\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ThemeProvider, {\n            theme: theme,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: this.handleSubmit,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Singlequestion;","map":{"version":3,"sources":["/home/flo/Projects/react/Holirate/src/components/SingleQuestion/singleQuestion.js"],"names":["React","Radio","Button","RadioGroup","FormControlLabel","FormControl","FormLabel","ScoreHeader","theme","QuizData","ThemeProvider","Singlequestion","Component","constructor","forceUpdateHandler","forceUpdate","radioHandler","event","test","parseInt","target","value","indexValue","handleSubmit","currentIndex","props","state","Travelmode","points","index","console","log","options","values","callbackSingleQuestion","bind","render","question","score","map","option"],"mappings":"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","sourcesContent":["/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 17:23:53 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-05-29 17:35:49\n */\n\nimport React from \"react\";\nimport Radio from '@material-ui/core/Radio';\nimport Button from '@material-ui/core/Button';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel'\nimport '@fontsource/roboto';\nimport { ScoreHeader, theme } from \"../stylesUI\";\n\nimport { QuizData } from '../Data/Fragen';\nimport { ThemeProvider } from \"@material-ui/core\";\n\n\n\nclass Singlequestion extends React.Component {\n    constructor() {\n        super();\n        this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n        this.indexValue = null;\n    };\n\n    forceUpdateHandler = () => {\n        this.forceUpdate();\n    };\n\n    radioHandler = (event) => {\n        //console.log(event.target.value);\n        var test = parseInt(event.target.value);\n        this.indexValue = test;\n        //console.log(test);\n        this.forceUpdateHandler();\n    }\n\n\n    //Check the answer\n    handleSubmit = () => {\n        if (this.indexValue != null) {\n            const { currentIndex } = this.props.state;\n            var Travelmode = null;\n            var points = 0;\n            var index = this.indexValue;\n            console.log(index);\n\n\n            if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\n                Travelmode = \"Fligth\";\n            } else if (QuizData[currentIndex].options[index] === \"Auto\") {\n                Travelmode = \"Car\";\n            } else if (QuizData[currentIndex].options[index] === \"Zug\") {\n                Travelmode = \"Train\";\n            } else {\n                points = QuizData[currentIndex].values[index];\n            }\n\n            this.indexValue = null;\n            this.props.callbackSingleQuestion(index, points, Travelmode);\n        }\n    }/*checkAnswer*/\n\n\n\n    render() {\n        const { question, options, currentIndex, score } = this.props.state;\n        //console.log(\"indexValue\");\n        //console.log(this.indexValue);\n        return (\n            <div>\n                <ThemeProvider theme={theme}>\n                    <ScoreHeader score={score} currentIndex={currentIndex} />\n                    <FormControl component=\"fieldset\">\n                        <FormLabel component=\"legend\">{question}</FormLabel>\n                        <br></br>\n                        <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={this.indexValue} onChange={this.radioHandler}>\n                            {\n                                options.map((option, index) => (  //for each option, new paragrap\n                                    <FormControlLabel value={index + 1}\n                                        control={<Radio\n                                            checked={this.indexValue === (index + 1)} />}\n                                        label={option} />\n                                ))\n                            }\n                        </RadioGroup>\n                        <ThemeProvider theme={theme}>\n                        <Button variant=\"contained\" onClick={this.handleSubmit}>\n                            Next\n                        </Button>\n                        </ThemeProvider>\n                    </FormControl>\n                </ThemeProvider>\n            </div >\n        )\n    }\n}\n\nexport default Singlequestion;"]},"metadata":{},"sourceType":"module"}