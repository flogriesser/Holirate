{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/react/holirate/src/components/Quiz.js\";\nimport React, { Component } from 'react'; //import {QuizData} from './QuizData';\n\nimport { QuizData } from './Fragen';\n/*import '../App.css'*/\n\nimport './circle.css'; //import './maps'\n//import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\n\nimport { DistanceMatrixService, LoadScript } from \"@react-google-maps/api\";\nimport Map from \"./Maps/maps\";\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\n\nimport { GoogleMap\n/*StandaloneSearchBox,*/\n, DirectionsRenderer } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultLocation = {\n  lat: 48.1374300,\n  lng: 11.5754900\n};\nlet destination = {};\nlet origin = {};\nvar RouteDistance = 0;\nlet directionsService;\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userAnswer: null,\n      //current users answer\n      type: \"single\",\n      //question Type\n      currentIndex: 0,\n      //current questions index\n      options: [],\n      //the options\n      values: null,\n      //Values of Single or Multiple choice\n      tipps: null,\n      ChoosenTipps: [],\n      quizEnd: false,\n      score: 0,\n      disabled: true,\n      Distance: 0,\n      TravelMode: 'DRIVING',\n      directions: null,\n      bounds: null\n    };\n\n    this.loadQuiz = () => {\n      const {\n        currentIndex\n      } = this.state; //get the current index\n\n      this.setState(() => {\n        return {\n          question: QuizData[currentIndex].question,\n          type: QuizData[currentIndex].type,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values,\n          tipps: QuizData[currentIndex].tipps,\n          distance: 0\n        };\n      });\n    };\n\n    this.nextQuestionHander = () => {\n      const {\n        userAnswer,\n        score\n      } = this.state;\n      this.setState({\n        score: score + userAnswer,\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.checkAnswer = (answer, index) => {\n      const {\n        currentIndex,\n        score\n      } = this.state;\n      var nextQuestion = 1;\n\n      if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\n        console.log(\"1. Flugzeug\");\n        nextQuestion = 2;\n      } else if (QuizData[currentIndex].options[index] === \"Auto\" || QuizData[currentIndex].options[index] === \"Fahrad\" || QuizData[currentIndex].options[index] === \"Zug\") {\n        console.log(QuizData[currentIndex].options[index]);\n        nextQuestion = 1;\n      } else {\n        this.setState({\n          disabled: false,\n          score: score + QuizData[currentIndex].values[index]\n        });\n      }\n\n      this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n\n      if (currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      } else {\n        this.setState({\n          currentIndex: this.state.currentIndex + nextQuestion\n        });\n      }\n    };\n\n    this.checkNumber = index => {\n      const {\n        currentIndex\n      } = this.state;\n      console.log(currentIndex);\n      this.setState({\n        disabled: false,\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.finishHandler = () => {\n      if (this.state.currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      }\n    };\n\n    this.onMapLoad = map => {\n      directionsService = new google.maps.DirectionsService(); //load default origin and destination\n      //this.changeDirection(origin, destination);\n    };\n\n    this.onSBLoad = ref => {\n      this.searchBox = ref;\n    };\n\n    this.onPlacesChanged = () => {\n      //pass the new place location as the origin\n      origin = document.getElementById(\"Start\").value;\n      console.log(origin);\n      destination = document.getElementById(\"Stop\").value;\n      this.changeDirection(origin, destination);\n    };\n\n    this.changeDirection = (origin, destination) => {\n      directionsService.route({\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.DRIVING\n      }, (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          //changing the state of directions to the result of direction service\n          RouteDistance = result.routes[0].legs[0].distance.value / 1000;\n          console.log(RouteDistance); //Quiz.setDistance(result.routes[0].legs[0].distance.value/1000);\n\n          document.getElementById('Distance').innerHTML = RouteDistance + \" km\";\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      });\n    };\n  }\n\n  //Load the quiz once the component mounts\n  componentDidMount() {\n    this.loadQuiz();\n  } //Update the component\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      currentIndex\n    } = this.state;\n\n    if (this.state.currentIndex !== prevState.currentIndex) {\n      this.setState(() => {\n        return {\n          disabled: true,\n          type: QuizData[currentIndex].type,\n          question: QuizData[currentIndex].question,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values\n        };\n      });\n    }\n  } //Check the answer\n\n\n  /*\r\n     sendDistance= () => {\r\n      if(RouteDistance !== 0)\r\n      {\r\n        Quiz.setDistance(RouteDistance);\r\n        Quiz.afterMap();\r\n      }  \r\n  */\n\n  /******************************************************************** */\n\n  /*                 RENDER                                             */\n\n  /******************************************************************** */\n  render() {\n    const {\n      question,\n      options,\n      currentIndex,\n      quizEnd,\n      ChoosenTipps,\n      type\n    } = this.state; //get the current state       \n\n    if (quizEnd) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Dein Holirate Rating ist fertig!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"circle-wrap\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circle\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mask full\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"fill\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mask half\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"fill\",\n                style: {\n                  transform: `rotate(${360 * this.state.score / 100}deg)`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inside-circle\",\n              children: [this.state.score, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [this.state.score, \" points\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Hier noch ein paar Tipps f\\xFCr deine Reise\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ChoosenTipps.map((tipp, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"options-container\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"options-text\",\n              children: [\" \", tipp]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 33\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (type === \"single\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"hud\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hud-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hud-prefix\",\n              children: [\"Question \", currentIndex + 1, \" / \", QuizData.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"progressBar\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"progressBarFull\",\n                style: {\n                  width: `${currentIndex / QuizData.length * 100}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hud-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hud-prefix\",\n              children: \"Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"hud-main-text\",\n              id: \"score\",\n              children: this.state.score\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }, this), options.map((option, index) =>\n        /*#__PURE__*/\n        //for each option, new paragrap\n        _jsxDEV(\"div\", {\n          className: `options-container`,\n          onClick: () => this.checkAnswer(option, index),\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"options-prefix\",\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"options-text\",\n            children: [\" \", option]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"number\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"hud\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hud-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hud-prefix\",\n              children: [\"Question \", currentIndex + 1, \" / \", QuizData.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"progressBar\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"progressBarFull\",\n                style: {\n                  width: `${currentIndex / QuizData.length * 100}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hud-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hud-prefix\",\n              children: \"Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"hud-main-text\",\n              id: \"score\",\n              children: this.state.score\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 21\n        }, this), options.map((option, index) =>\n        /*#__PURE__*/\n        //for each option, new paragrap\n        _jsxDEV(\"div\", {\n          className: `options-container`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"options-text\",\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"OwnInput\",\n            type: \"number\",\n            id: index,\n            name: \"quantity\",\n            min: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"OwnSubmit\",\n          onClick: () => this.checkNumber(),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"transport\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"hud\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hud-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hud-prefix\",\n              children: [\"Question \", currentIndex + 1, \" / \", QuizData.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"progressBar\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"progressBarFull\",\n                style: {\n                  width: `${currentIndex / QuizData.length * 100}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hud-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hud-prefix\",\n              children: \"Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"hud-main-text\",\n              id: \"score\",\n              children: this.state.score\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `options-container`,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"options-text\",\n              children: \"Startpunkt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"OwnInput\",\n              type: \"text\",\n              id: \"Start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 39\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `options-container`,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"options-text\",\n              children: \"Reiseziel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"OwnInput\",\n              type: \"text\",\n              id: \"Stop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"OwnSubmit\",\n            onClick: () => this.onPlacesChanged(),\n            children: \"Calculate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            id: \"Distance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"OwnSubmit\",\n            onClick: () => this.sendDistance(),\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n            center: defaultLocation,\n            zoom: 10,\n            onLoad: map => this.onMapLoad(map),\n            mapContainerStyle: {\n              height: \"40vh\",\n              width: \"80vw\"\n            },\n            children: this.state.directions !== null && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n              directions: this.state.directions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }, this);\n    }\n  }\n  /******************************************************************** */\n\n  /*                 RENDER                                             */\n\n  /******************************************************************** */\n\n\n}\n\nQuiz.setDistance = distanceKM => {\n  Quiz.setState({\n    distance: distanceKM\n  });\n};\n\nQuiz.afterMap = () => {\n  Quiz.setState({\n    currentIndex: Quiz.state.currentIndex + 1\n  });\n};\n\nexport default Quiz;","map":{"version":3,"sources":["/home/flo/Projects/react/holirate/src/components/Quiz.js"],"names":["React","Component","QuizData","DistanceMatrixService","LoadScript","Map","lib","key","GoogleMap","DirectionsRenderer","defaultLocation","lat","lng","destination","origin","RouteDistance","directionsService","Quiz","state","userAnswer","type","currentIndex","options","values","tipps","ChoosenTipps","quizEnd","score","disabled","Distance","TravelMode","directions","bounds","loadQuiz","setState","question","distance","nextQuestionHander","checkAnswer","answer","index","nextQuestion","console","log","push","length","checkNumber","finishHandler","onMapLoad","map","google","maps","DirectionsService","onSBLoad","ref","searchBox","onPlacesChanged","document","getElementById","value","changeDirection","route","travelMode","DRIVING","result","status","DirectionsStatus","OK","routes","legs","innerHTML","error","componentDidMount","componentDidUpdate","prevProps","prevState","render","transform","tipp","width","option","sendDistance","height","setDistance","distanceKM","afterMap"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n//import {QuizData} from './QuizData';\r\nimport { QuizData } from './Fragen';\r\n/*import '../App.css'*/\r\nimport './circle.css';\r\n//import './maps'\r\n//import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\r\nimport { DistanceMatrixService, LoadScript } from \"@react-google-maps/api\";\r\nimport Map from \"./Maps/maps\";\r\n\r\n\r\nconst lib = [\"places\"];\r\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\r\n\r\nimport {\r\n    GoogleMap,\r\n    /*StandaloneSearchBox,*/\r\n    DirectionsRenderer,\r\n  } from \"@react-google-maps/api\";\r\n  \r\n  const defaultLocation = { lat: 48.1374300, lng: 11.5754900 };\r\n  let destination = { };\r\n  let origin = {  };\r\n  var RouteDistance = 0;\r\n  \r\n  \r\n  let directionsService;\r\n\r\n\r\n\r\n\r\n\r\nclass Quiz extends Component {\r\n    state = {\r\n        userAnswer: null,    //current users answer\r\n        type: \"single\",         //question Type\r\n        currentIndex: 0,     //current questions index\r\n        options: [],        //the options\r\n        values: null,         //Values of Single or Multiple choice\r\n        tipps: null,\r\n        ChoosenTipps: [],\r\n        quizEnd: false,\r\n        score: 0,\r\n        disabled: true,\r\n        Distance: 0,\r\n        TravelMode: 'DRIVING',\r\n\r\n        directions: null,\r\n        bounds: null\r\n    }\r\n\r\n\r\n    //Component that holds the current quiz\r\n    loadQuiz = () => {\r\n        const { currentIndex } = this.state //get the current index\r\n        this.setState(() => {\r\n            return {\r\n                question: QuizData[currentIndex].question,\r\n                type: QuizData[currentIndex].type,\r\n                options: QuizData[currentIndex].options,\r\n                values: QuizData[currentIndex].values,\r\n                tipps: QuizData[currentIndex].tipps,\r\n                distance: 0\r\n            }\r\n        }\r\n        )\r\n    }\r\n    \r\n    static setDistance = (distanceKM) => {\r\n        this.setState({\r\n            distance: distanceKM\r\n        })\r\n\r\n    }\r\n\r\n    //Handles Click event for the next button\r\n    nextQuestionHander = () => {\r\n        const { userAnswer, score } = this.state\r\n        this.setState({\r\n            score: score + userAnswer,\r\n            currentIndex: this.state.currentIndex + 1\r\n        })\r\n    }\r\n\r\n    static afterMap = () => {\r\n        this.setState({\r\n            currentIndex: this.state.currentIndex + 1\r\n        })\r\n    }\r\n\r\n    //Load the quiz once the component mounts\r\n    componentDidMount() {\r\n        this.loadQuiz();\r\n    }\r\n\r\n    //Update the component\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { currentIndex } = this.state;\r\n        if (this.state.currentIndex !== prevState.currentIndex) {\r\n            this.setState(() => {\r\n                return {\r\n                    disabled: true,\r\n                    type: QuizData[currentIndex].type,\r\n                    question: QuizData[currentIndex].question,\r\n                    options: QuizData[currentIndex].options,\r\n                    values: QuizData[currentIndex].values\r\n\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    //Check the answer\r\n    checkAnswer = (answer, index) => {\r\n        const { currentIndex, score } = this.state;\r\n        var nextQuestion = 1;\r\n        if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\r\n            console.log(\"1. Flugzeug\");\r\n            nextQuestion = 2;\r\n        } else if (QuizData[currentIndex].options[index] === \"Auto\" ||\r\n            QuizData[currentIndex].options[index] === \"Fahrad\" ||\r\n            QuizData[currentIndex].options[index] === \"Zug\") {\r\n            console.log(QuizData[currentIndex].options[index]);\r\n            nextQuestion = 1;\r\n        } else {\r\n            this.setState({\r\n                disabled: false,\r\n                score: score + QuizData[currentIndex].values[index]\r\n            })\r\n        }\r\n        this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\r\n\r\n        if (currentIndex === QuizData.length - 1) {\r\n            this.setState({\r\n                quizEnd: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                currentIndex: this.state.currentIndex + nextQuestion\r\n            })\r\n        }\r\n    }\r\n\r\n    checkNumber = (index) => {\r\n        const { currentIndex } = this.state;\r\n        console.log(currentIndex);\r\n\r\n        this.setState({\r\n            disabled: false,\r\n            currentIndex: this.state.currentIndex + 1\r\n        })\r\n    }\r\n\r\n    //Responds to the click of the finish button\r\n    finishHandler = () => {\r\n        if (this.state.currentIndex === QuizData.length - 1) {\r\n            this.setState({\r\n                quizEnd: true\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    onMapLoad = map => {\r\n        directionsService = new google.maps.DirectionsService();\r\n    \r\n        //load default origin and destination\r\n        //this.changeDirection(origin, destination);\r\n      };\r\n    \r\n      //function that is called when SearchBox has loaded and assigned ref to this.searchbox  to get the searchbox object\r\n      onSBLoad = ref => {\r\n        this.searchBox = ref;\r\n      };\r\n    \r\n      onPlacesChanged = () => {\r\n        //pass the new place location as the origin\r\n        origin = document.getElementById(\"Start\").value;\r\n        console.log(origin);\r\n        destination = document.getElementById(\"Stop\").value;\r\n        this.changeDirection(\r\n          origin,\r\n          destination\r\n        );\r\n      };\r\n    \r\n      //function that is calling the directions service\r\n      changeDirection = (origin, destination) => {\r\n        directionsService.route(\r\n          {\r\n            origin: origin,\r\n            destination: destination,\r\n            travelMode: google.maps.TravelMode.DRIVING\r\n          },\r\n          (result, status) => {\r\n            if (status === google.maps.DirectionsStatus.OK) {\r\n              //changing the state of directions to the result of direction service\r\n              RouteDistance = result.routes[0].legs[0].distance.value / 1000;\r\n              console.log(RouteDistance);\r\n              //Quiz.setDistance(result.routes[0].legs[0].distance.value/1000);\r\n              document.getElementById('Distance').innerHTML = RouteDistance + \" km\";\r\n              this.setState({\r\n                directions: result\r\n              });\r\n            } else {\r\n              console.error(`error fetching directions ${result}`);\r\n            }\r\n          }\r\n        );\r\n      };\r\n\r\n      \r\n\r\n    /*\r\n       sendDistance= () => {\r\n        if(RouteDistance !== 0)\r\n        {\r\n          Quiz.setDistance(RouteDistance);\r\n          Quiz.afterMap();\r\n        }  \r\n*/\r\n\r\n/******************************************************************** */\r\n/*                 RENDER                                             */\r\n/******************************************************************** */\r\n\r\n    render() {\r\n        const { question, options, currentIndex, quizEnd, ChoosenTipps, type } = this.state //get the current state       \r\n        if (quizEnd) {\r\n            return (\r\n                <div>\r\n                    <h1>Dein Holirate Rating ist fertig!</h1>\r\n                    <div className=\"circle-wrap\">\r\n                        <div className=\"circle\">\r\n\r\n                            <div className=\"mask full\">\r\n                                <div className=\"fill\" ></div>\r\n                            </div>\r\n\r\n                            <div className=\"mask half\">\r\n                                <div className=\"fill\" style={{ transform: `rotate(${360 * this.state.score / 100}deg)` }}></div>\r\n                            </div>\r\n\r\n                            <div className=\"inside-circle\">\r\n                                {this.state.score}%\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <h1>{this.state.score} points</h1>\r\n                    <br></br>\r\n                    <h4>Hier noch ein paar Tipps für deine Reise</h4>\r\n                    <br></br>\r\n                    <ul>\r\n\r\n                        {ChoosenTipps.map((tipp, index) => (\r\n                            <li className='options-container'\r\n                                key={index}>\r\n                                <p className=\"options-text\"> {tipp}</p>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n        if (type === \"single\") {\r\n            return (\r\n                <div>\r\n                    <div id=\"hud\">\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Question {currentIndex + 1} / {QuizData.length}\r\n                            </p>\r\n                            <div id=\"progressBar\">\r\n                                <div id=\"progressBarFull\" style={{ width: `${(currentIndex / QuizData.length) * 100}%` }}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Score\r\n            </p>\r\n                            <h1 className=\"hud-main-text\" id=\"score\">\r\n                                {this.state.score}\r\n                            </h1>\r\n                        </div>\r\n                    </div>\r\n                    <br></br>\r\n                    <h2>{question}</h2>\r\n                    <br></br>\r\n                    {\r\n                        options.map((option, index) => (  //for each option, new paragrap\r\n                            <div key={index}\r\n                                className={`options-container`}\r\n                                onClick={() => this.checkAnswer(option, index)}>\r\n                                <p className=\"options-prefix\">{index + 1}</p>\r\n                                <p className=\"options-text\"> {option}</p>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div >\r\n            )\r\n        } else if (type === \"number\") {\r\n            return (\r\n                <div>\r\n                    <div id=\"hud\">\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Question {currentIndex + 1} / {QuizData.length}\r\n                            </p>\r\n                            <div id=\"progressBar\">\r\n                                <div id=\"progressBarFull\" style={{ width: `${(currentIndex / QuizData.length) * 100}%` }}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Score\r\n        </p>\r\n                            <h1 className=\"hud-main-text\" id=\"score\">\r\n                                {this.state.score}\r\n                            </h1>\r\n                        </div>\r\n                    </div>\r\n                    <br></br>\r\n                    <h2>{question}</h2>\r\n                    {\r\n                        options.map((option, index) => (  //for each option, new paragrap\r\n                            <div key={index} className={`options-container`}>\r\n                                <p className=\"options-text\">{option}</p>\r\n                                <input className=\"OwnInput\" type=\"number\" id={index} name=\"quantity\" min=\"1\" ></input>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    <br></br>\r\n                    <div className=\"OwnSubmit\"\r\n                        onClick={() => this.checkNumber()}>\r\n                        Submit</div>\r\n                </div >)\r\n        } else if (type === \"transport\") {\r\n            return (\r\n                <div>\r\n                    <div id=\"hud\">\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Question {currentIndex + 1} / {QuizData.length}\r\n                            </p>\r\n                            <div id=\"progressBar\">\r\n                                <div id=\"progressBarFull\" style={{ width: `${(currentIndex / QuizData.length) * 100}%` }}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Score\r\n    </p>\r\n                            <h1 className=\"hud-main-text\" id=\"score\">\r\n                                {this.state.score}\r\n                            </h1>\r\n                        </div>\r\n                    </div>\r\n                    <br></br>\r\n                    <h2>{question}</h2>\r\n                    <br></br>\r\n                    <div>\r\n\r\n                                      <div className={`options-container`}>\r\n                                <p className=\"options-text\">Startpunkt</p>\r\n                                <input className=\"OwnInput\" type=\"text\" id=\"Start\" ></input>\r\n                            </div>\r\n                            <div className={`options-container`}>\r\n                                <p className=\"options-text\">Reiseziel</p>\r\n                                <input className=\"OwnInput\" type=\"text\" id=\"Stop\" ></input>\r\n                            </div>\r\n                            <div className=\"OwnSubmit\"\r\n                            onClick={() => this.onPlacesChanged()}>\r\n                              \r\n                        Calculate</div>\r\n                        <br></br>\r\n                        <h2 id=\"Distance\"></h2>\r\n                        <div className=\"OwnSubmit\"\r\n                            onClick={() => this.sendDistance()}>\r\n                        Submit</div>\r\n                        <br></br>\r\n\r\n          <GoogleMap\r\n            center={defaultLocation}\r\n            zoom={10}\r\n            onLoad={map => this.onMapLoad(map)}\r\n            mapContainerStyle={{ height: \"40vh\", width: \"80vw\" }}\r\n          >\r\n            {this.state.directions !== null && (\r\n              <DirectionsRenderer directions={this.state.directions} />\r\n            )}\r\n          </GoogleMap>\r\n        </div>\r\n                </div > )\r\n        }\r\n    }\r\n\r\n/******************************************************************** */\r\n/*                 RENDER                                             */\r\n/******************************************************************** */\r\n}\r\n\r\n\r\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}