{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/react/holirate/src/components/Maps/maps.js\";\n\n/*global google*/\n//import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport Quiz from \"../Quiz\";\nimport { GoogleMap\n/*StandaloneSearchBox,*/\n, DirectionsRenderer } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultLocation = {\n  lat: 48.1374300,\n  lng: 11.5754900\n};\nlet destination = {};\nlet origin = {};\nvar RouteDistance = 0;\nlet directionsService;\n\nclass Map extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      directions: null,\n      bounds: null\n    };\n\n    this.onMapLoad = map => {\n      directionsService = new google.maps.DirectionsService(); //load default origin and destination\n      //this.changeDirection(origin, destination);\n    };\n\n    this.onSBLoad = ref => {\n      this.searchBox = ref;\n    };\n\n    this.onPlacesChanged = () => {\n      //pass the new place location as the origin\n      origin = document.getElementById(\"Start\").value;\n      console.log(origin);\n      destination = document.getElementById(\"Stop\").value;\n      this.changeDirection(origin, destination);\n    };\n\n    this.changeDirection = (origin, destination) => {\n      directionsService.route({\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.DRIVING\n      }, (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          //changing the state of directions to the result of direction service\n          RouteDistance = result.routes[0].legs[0].distance.value / 1000;\n          console.log(RouteDistance);\n          Quiz.distance = RouteDistance; //Quiz.setDistance(result.routes[0].legs[0].distance.value/1000);\n\n          document.getElementById('Distance').innerHTML = RouteDistance + \" km\";\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      });\n    };\n  }\n\n  /*\n     sendDistance= () => {\n      if(RouteDistance !== 0)\n      {\n        //Quiz.setDistance(RouteDistance);\n        Quiz.afterMap();\n      }  \n  \n    }\n  */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `options-container`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"options-text\",\n          children: \"Startpunkt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"OwnInput\",\n          type: \"text\",\n          id: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 39\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `options-container`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"options-text\",\n          children: \"Reiseziel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"OwnInput\",\n          type: \"text\",\n          id: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"OwnSubmit\",\n        onClick: () => this.onPlacesChanged(),\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"Distance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n        center: defaultLocation,\n        zoom: 10,\n        onLoad: map => this.onMapLoad(map),\n        mapContainerStyle: {\n          height: \"40vh\",\n          width: \"60vw\"\n        },\n        children: this.state.directions !== null && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n          directions: this.state.directions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/flo/Projects/react/holirate/src/components/Maps/maps.js"],"names":["React","Quiz","GoogleMap","DirectionsRenderer","defaultLocation","lat","lng","destination","origin","RouteDistance","directionsService","Map","Component","state","directions","bounds","onMapLoad","map","google","maps","DirectionsService","onSBLoad","ref","searchBox","onPlacesChanged","document","getElementById","value","console","log","changeDirection","route","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","routes","legs","distance","innerHTML","setState","error","render","height","width"],"mappings":"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","sourcesContent":["/*global google*/\n//import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport Quiz from \"../Quiz\"\n\nimport {\n  GoogleMap,\n  /*StandaloneSearchBox,*/\n  DirectionsRenderer,\n} from \"@react-google-maps/api\";\n\nconst defaultLocation = { lat: 48.1374300, lng: 11.5754900 };\nlet destination = { };\nlet origin = {  };\nvar RouteDistance = 0;\n\n\nlet directionsService;\n\nclass Map extends React.Component {\n  state = {\n    directions: null,\n    bounds: null\n  };\n\n  onMapLoad = map => {\n    directionsService = new google.maps.DirectionsService();\n\n    //load default origin and destination\n    //this.changeDirection(origin, destination);\n  };\n\n  //function that is called when SearchBox has loaded and assigned ref to this.searchbox  to get the searchbox object\n  onSBLoad = ref => {\n    this.searchBox = ref;\n  };\n\n  onPlacesChanged = () => {\n    //pass the new place location as the origin\n    origin = document.getElementById(\"Start\").value;\n    console.log(origin);\n    destination = document.getElementById(\"Stop\").value;\n    this.changeDirection(\n      origin,\n      destination\n    );\n  };\n\n  //function that is calling the directions service\n  changeDirection = (origin, destination) => {\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.DRIVING\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          //changing the state of directions to the result of direction service\n          RouteDistance = result.routes[0].legs[0].distance.value / 1000;\n          console.log(RouteDistance);\n          Quiz.distance = RouteDistance;\n          //Quiz.setDistance(result.routes[0].legs[0].distance.value/1000);\n          document.getElementById('Distance').innerHTML = RouteDistance + \" km\";\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n  };\n/*\n   sendDistance= () => {\n    if(RouteDistance !== 0)\n    {\n      //Quiz.setDistance(RouteDistance);\n      Quiz.afterMap();\n    }  \n\n  }\n*/\n  render() {\n    return (\n        <div>\n\n                                      <div className={`options-container`}>\n                                <p className=\"options-text\">Startpunkt</p>\n                                <input className=\"OwnInput\" type=\"text\" id=\"Start\" ></input>\n                            </div>\n                            <div className={`options-container`}>\n                                <p className=\"options-text\">Reiseziel</p>\n                                <input className=\"OwnInput\" type=\"text\" id=\"Stop\" ></input>\n                            </div>\n                            <div className=\"OwnSubmit\"\n                            onClick={() => this.onPlacesChanged()}>\n                              \n                        Calculate</div>\n                        <br></br>\n                        <h2 id=\"Distance\"></h2>\n                        <br></br>\n\n          <GoogleMap\n            center={defaultLocation}\n            zoom={10}\n            onLoad={map => this.onMapLoad(map)}\n            mapContainerStyle={{ height: \"40vh\", width: \"60vw\" }}\n          >\n            {this.state.directions !== null && (\n              <DirectionsRenderer directions={this.state.directions} />\n            )}\n          </GoogleMap>\n        </div>\n    );\n  }\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}