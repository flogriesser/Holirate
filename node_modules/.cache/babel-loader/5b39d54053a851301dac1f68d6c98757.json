{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/react/holirate/src/components/Quiz.js\";\nimport React, { Component } from 'react'; //import {QuizData} from './QuizData';\n\nimport { QuizData } from './Fragen';\n/*import '../App.css'*/\n\nimport './circle.css'; //import './maps'\n//import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\n\nimport { LoadScript } from \"@react-google-maps/api\";\nimport Map from \"./Maps/maps\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userAnswer: null,\n      //current users answer\n      type: \"single\",\n      //question Type\n      currentIndex: 0,\n      //current questions index\n      options: [],\n      //the options\n      values: null,\n      //Values of Single or Multiple choice\n      tipps: null,\n      ChoosenTipps: [],\n      quizEnd: false,\n      score: 0,\n      disabled: true\n    };\n\n    this.getState = () => {\n      return this.state;\n    };\n\n    this.loadQuiz = () => {\n      const {\n        currentIndex\n      } = this.state; //get the current index\n\n      this.setState(() => {\n        return {\n          question: QuizData[currentIndex].question,\n          type: QuizData[currentIndex].type,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values,\n          tipps: QuizData[currentIndex].tipps\n        };\n      });\n    };\n\n    this.nextQuestionHander = () => {\n      const {\n        userAnswer,\n        score\n      } = this.state;\n      this.setState({\n        score: score + userAnswer,\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.checkAnswer = (answer, index) => {\n      const {\n        currentIndex,\n        score\n      } = this.state;\n      var nextQuestion = 1;\n\n      if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\n        console.log(\"1. Flugzeug\");\n        nextQuestion = 2;\n      } else if (QuizData[currentIndex].options[index] === \"Auto\" || QuizData[currentIndex].options[index] === \"Fahrad\" || QuizData[currentIndex].options[index] === \"Zug\") {\n        console.log(QuizData[currentIndex].options[index]);\n        nextQuestion = 1;\n      } else {\n        this.setState({\n          disabled: false,\n          score: score + QuizData[currentIndex].values[index]\n        });\n      }\n\n      this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n\n      if (currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      } else {\n        this.setState({\n          currentIndex: this.state.currentIndex + nextQuestion\n        });\n      }\n    };\n\n    this.checkNumber = index => {\n      const {\n        currentIndex\n      } = this.state;\n      console.log(currentIndex);\n      this.setState({\n        disabled: false,\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.finishHandler = () => {\n      if (this.state.currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      }\n    };\n  }\n\n  //Load the quiz once the component mounts\n  componentDidMount() {\n    this.loadQuiz();\n  } //Update the component\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      currentIndex\n    } = this.state;\n\n    if (this.state.currentIndex !== prevState.currentIndex) {\n      this.setState(() => {\n        return {\n          disabled: true,\n          type: QuizData[currentIndex].type,\n          question: QuizData[currentIndex].question,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values\n        };\n      });\n    }\n  } //Check the answer\n\n\n  render() {\n    const {\n      question,\n      options,\n      currentIndex,\n      quizEnd,\n      ChoosenTipps,\n      type\n    } = this.state; //get the current state       \n\n    if (quizEnd) {\n      /*FIXME Instead of item.values the loaded tipps should be printed*/\n      return returnEnd(ChoosenTipps);\n    }\n\n    if (type === \"single\") {\n      return returnSingleQuestion(currentIndex, question, options);\n    } else if (type === \"number\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"hud\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hud-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hud-prefix\",\n              children: [\"Question \", currentIndex + 1, \" / \", QuizData.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"progressBar\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"progressBarFull\",\n                style: {\n                  width: `${currentIndex / QuizData.length * 100}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hud-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hud-prefix\",\n              children: \"Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"hud-main-text\",\n              id: \"score\",\n              children: this.state.score\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), options.map((option, index) =>\n        /*#__PURE__*/\n        //for each option, new paragrap\n        _jsxDEV(\"div\", {\n          className: `options-container`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"options-text\",\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"OwnInput\",\n            type: \"number\",\n            id: index,\n            name: \"quantity\",\n            min: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"OwnSubmit\",\n          onClick: () => this.checkNumber(),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"transport\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"hud\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hud-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hud-prefix\",\n              children: [\"Question \", currentIndex + 1, \" / \", QuizData.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"progressBar\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"progressBarFull\",\n                style: {\n                  width: `${currentIndex / QuizData.length * 100}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hud-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hud-prefix\",\n              children: \"Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"hud-main-text\",\n              id: \"score\",\n              children: this.state.score\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), options.map((option, index) =>\n        /*#__PURE__*/\n        //for each option, new paragrap\n        _jsxDEV(\"div\", {\n          className: `options-container`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"options-text\",\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"OwnInput\",\n            type: \"text\",\n            id: index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LoadScript, {\n          googleMapsApiKey: key,\n          libraries: lib,\n          children: /*#__PURE__*/_jsxDEV(Map, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nfunction returnEnd(ChoosenTipps) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dein Holirate Rating ist fertig!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"circle-wrap\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"circle\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mask full\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fill\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mask half\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fill\",\n            style: {\n              transform: `rotate(${360 * this.state.score / 100}deg)`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inside-circle\",\n          children: [this.state.score, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [this.state.score, \" points\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Hier noch ein paar Tipps f\\xFCr deine Reise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: ChoosenTipps.map((tipp, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"options-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"options-text\",\n          children: [\" \", tipp]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 13\n  }, this);\n}\n\nfunction returnSingleQuestion(currentIndex, question, options) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hud\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"hud-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"hud-prefix\",\n          children: [\"Question \", currentIndex + 1, \" / \", QuizData.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"progressBar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"progressBarFull\",\n            style: {\n              width: `${currentIndex / QuizData.length * 100}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"hud-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"hud-prefix\",\n          children: \"Score\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"hud-main-text\",\n          id: \"score\",\n          children: Quiz.this.state.score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }, this), options.map((option, index) =>\n    /*#__PURE__*/\n    //for each option, new paragrap\n    _jsxDEV(\"div\", {\n      className: `options-container`,\n      onClick: () => Quiz.checkAnswer(option, index),\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"options-prefix\",\n        children: index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"options-text\",\n        children: [\" \", option]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 25\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 9\n  }, this);\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/flo/Projects/react/holirate/src/components/Quiz.js"],"names":["React","Component","QuizData","LoadScript","Map","lib","key","Quiz","state","userAnswer","type","currentIndex","options","values","tipps","ChoosenTipps","quizEnd","score","disabled","getState","loadQuiz","setState","question","nextQuestionHander","checkAnswer","answer","index","nextQuestion","console","log","push","length","checkNumber","finishHandler","componentDidMount","componentDidUpdate","prevProps","prevState","render","returnEnd","returnSingleQuestion","width","map","option","transform","tipp","this"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n//import {QuizData} from './QuizData';\r\nimport { QuizData } from './Fragen';\r\n/*import '../App.css'*/\r\nimport './circle.css';\r\n//import './maps'\r\n//import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\r\nimport { LoadScript } from \"@react-google-maps/api\";\r\nimport Map from \"./Maps/maps\";\r\n\r\n\r\nconst lib = [\"places\"];\r\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\r\n\r\n\r\nclass Quiz extends Component {\r\n    state = {\r\n        userAnswer: null,    //current users answer\r\n        type: \"single\",         //question Type\r\n        currentIndex: 0,     //current questions index\r\n        options: [],        //the options\r\n        values: null,         //Values of Single or Multiple choice\r\n        tipps: null,\r\n        ChoosenTipps: [],\r\n        quizEnd: false,\r\n        score: 0,\r\n        disabled: true\r\n    }\r\n\r\n    getState = () => {\r\n        return this.state\r\n    }\r\n\r\n    //Component that holds the current quiz\r\n    loadQuiz = () => {\r\n        const { currentIndex } = this.state //get the current index\r\n        this.setState(() => {\r\n            return {\r\n                question: QuizData[currentIndex].question,\r\n                type: QuizData[currentIndex].type,\r\n                options: QuizData[currentIndex].options,\r\n                values: QuizData[currentIndex].values,\r\n                tipps: QuizData[currentIndex].tipps\r\n            }\r\n        }\r\n        )\r\n    }\r\n\r\n    //Handles Click event for the next button\r\n    nextQuestionHander = () => {\r\n        const { userAnswer, score } = this.state\r\n        this.setState({\r\n            score: score + userAnswer,\r\n            currentIndex: this.state.currentIndex + 1\r\n        })\r\n    }\r\n\r\n    //Load the quiz once the component mounts\r\n    componentDidMount() {\r\n        this.loadQuiz();\r\n    }\r\n\r\n    //Update the component\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { currentIndex } = this.state;\r\n        if (this.state.currentIndex !== prevState.currentIndex) {\r\n            this.setState(() => {\r\n                return {\r\n                    disabled: true,\r\n                    type: QuizData[currentIndex].type,\r\n                    question: QuizData[currentIndex].question,\r\n                    options: QuizData[currentIndex].options,\r\n                    values: QuizData[currentIndex].values\r\n\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    //Check the answer\r\n    checkAnswer = (answer, index) => {\r\n        const { currentIndex, score } = this.state;\r\n        var nextQuestion = 1;\r\n        if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\r\n            console.log(\"1. Flugzeug\");\r\n            nextQuestion = 2;\r\n        } else if (QuizData[currentIndex].options[index] === \"Auto\" ||\r\n            QuizData[currentIndex].options[index] === \"Fahrad\" ||\r\n            QuizData[currentIndex].options[index] === \"Zug\") {\r\n            console.log(QuizData[currentIndex].options[index]);\r\n            nextQuestion = 1;\r\n        } else {\r\n            this.setState({\r\n                disabled: false,\r\n                score: score + QuizData[currentIndex].values[index]\r\n            })\r\n        }\r\n        this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\r\n\r\n        if (currentIndex === QuizData.length - 1) {\r\n            this.setState({\r\n                quizEnd: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                currentIndex: this.state.currentIndex + nextQuestion\r\n            })\r\n        }\r\n    }\r\n\r\n    checkNumber = (index) => {\r\n        const { currentIndex } = this.state;\r\n        console.log(currentIndex);\r\n\r\n        this.setState({\r\n            disabled: false,\r\n            currentIndex: this.state.currentIndex + 1\r\n        })\r\n    }\r\n\r\n    //Responds to the click of the finish button\r\n    finishHandler = () => {\r\n        if (this.state.currentIndex === QuizData.length - 1) {\r\n            this.setState({\r\n                quizEnd: true\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { question, options, currentIndex, quizEnd, ChoosenTipps, type } = this.state //get the current state       \r\n        if (quizEnd) {\r\n            /*FIXME Instead of item.values the loaded tipps should be printed*/\r\n            return returnEnd(ChoosenTipps)\r\n        }\r\n        if (type === \"single\") {\r\n            return returnSingleQuestion(currentIndex, question, options)\r\n        } else if (type === \"number\") {\r\n            return (\r\n                <div>\r\n                    <div id=\"hud\">\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Question {currentIndex + 1} / {QuizData.length}\r\n                            </p>\r\n                            <div id=\"progressBar\">\r\n                                <div id=\"progressBarFull\" style={{ width: `${(currentIndex / QuizData.length) * 100}%` }}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Score\r\n        </p>\r\n                            <h1 className=\"hud-main-text\" id=\"score\">\r\n                                {this.state.score}\r\n                            </h1>\r\n                        </div>\r\n                    </div>\r\n                    <br></br>\r\n                    <h2>{question}</h2>\r\n                    {\r\n                        options.map((option, index) => (  //for each option, new paragrap\r\n                            <div key={index} className={`options-container`}>\r\n                                <p className=\"options-text\">{option}</p>\r\n                                <input className=\"OwnInput\" type=\"number\" id={index} name=\"quantity\" min=\"1\" ></input>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    <br></br>\r\n                    <div className=\"OwnSubmit\"\r\n                        onClick={() => this.checkNumber()}>\r\n                        Submit</div>\r\n                </div >)\r\n        } else if (type === \"transport\") {\r\n            return (\r\n                <div>\r\n                    <div id=\"hud\">\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Question {currentIndex + 1} / {QuizData.length}\r\n                            </p>\r\n                            <div id=\"progressBar\">\r\n                                <div id=\"progressBarFull\" style={{ width: `${(currentIndex / QuizData.length) * 100}%` }}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Score\r\n    </p>\r\n                            <h1 className=\"hud-main-text\" id=\"score\">\r\n                                {this.state.score}\r\n                            </h1>\r\n                        </div>\r\n                    </div>\r\n                    <br></br>\r\n                    <h2>{question}</h2>\r\n                    {\r\n                        options.map((option, index) => (  //for each option, new paragrap\r\n                            <div key={index} className={`options-container`}>\r\n                                <p className=\"options-text\">{option}</p>\r\n                                <input className=\"OwnInput\" type=\"text\" id={index} ></input>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    <br></br>\r\n                    <LoadScript googleMapsApiKey={key} libraries={lib}>\r\n        <Map />\r\n      </LoadScript>\r\n                </div > )\r\n        }\r\n    }\r\n}\r\n\r\nfunction returnEnd(ChoosenTipps){\r\n    return(\r\n            <div>\r\n                <h1>Dein Holirate Rating ist fertig!</h1>\r\n                <div className=\"circle-wrap\">\r\n                    <div className=\"circle\">\r\n\r\n                        <div className=\"mask full\">\r\n                            <div className=\"fill\" ></div>\r\n                        </div>\r\n\r\n                        <div className=\"mask half\">\r\n                            <div className=\"fill\" style={{ transform: `rotate(${360 * this.state.score / 100}deg)` }}></div>\r\n                        </div>\r\n\r\n                        <div className=\"inside-circle\">\r\n                            {this.state.score}%\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <h1>{this.state.score} points</h1>\r\n                <br></br>\r\n                <h4>Hier noch ein paar Tipps für deine Reise</h4>\r\n                <br></br>\r\n                <ul>\r\n\r\n                    {ChoosenTipps.map((tipp, index) => (\r\n                        <li className='options-container'\r\n                            key={index}>\r\n                            <p className=\"options-text\"> {tipp}</p>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nfunction returnSingleQuestion(currentIndex, question, options){\r\n    return (\r\n        <div>\r\n            <div id=\"hud\">\r\n                <div id=\"hud-item\">\r\n                    <p className=\"hud-prefix\">\r\n                        Question {currentIndex + 1} / {QuizData.length}\r\n                    </p>\r\n                    <div id=\"progressBar\">\r\n                        <div id=\"progressBarFull\" style={{ width: `${(currentIndex / QuizData.length) * 100}%` }}></div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"hud-item\">\r\n                    <p className=\"hud-prefix\">\r\n                        Score\r\n    </p>\r\n                    <h1 className=\"hud-main-text\" id=\"score\">\r\n                        {Quiz.this.state.score}\r\n                    </h1>\r\n                </div>\r\n            </div>\r\n            <br></br>\r\n            <h2>{question}</h2>\r\n            <br></br>\r\n            {\r\n                options.map((option, index) => (  //for each option, new paragrap\r\n                    <div key={index}\r\n                        className={`options-container`}\r\n                        onClick={() => Quiz.checkAnswer(option, index)}>\r\n                        <p className=\"options-prefix\">{index + 1}</p>\r\n                        <p className=\"options-text\"> {option}</p>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Quiz;\r\n"]},"metadata":{},"sourceType":"module"}