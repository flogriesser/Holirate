{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/HolirateFolder/react/Holirate/src/components/Quiz.js\";\nimport React, { Component } from 'react';\nimport { QuizData } from './Data/Fragen';\nimport './circle.css'; //import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\n\nimport { LoadScript } from \"@react-google-maps/api\";\nimport Map from \"./Maps/maps\";\nimport Singlequestion from './SingleQuestion/singleQuestion';\nimport QuizEnds from './Score/quizEnd';\nimport Number from './Number/Number';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userAnswer: null,\n      //current users answer\n      type: \"single\",\n      //question Type\n      currentIndex: 0,\n      //current questions index\n      options: [],\n      //the options\n      values: null,\n      //Values of Single or Multiple choice\n      tipps: null,\n      ChoosenTipps: [],\n      quizEnd: false,\n      score: 0,\n      distance: 0,\n      TravelMode: 'Car',\n      co2: 0,\n      adults: 0,\n      children: 0,\n      num_backpags: 0,\n      kilo_backpags: 0,\n      days: 0,\n      weeks: 0,\n      directions: null,\n      bounds: null\n    };\n\n    this.loadQuiz = () => {\n      const {\n        currentIndex\n      } = this.state; //get the current index\n\n      this.setState(() => {\n        return {\n          question: QuizData[currentIndex].question,\n          type: QuizData[currentIndex].type,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values,\n          tipps: QuizData[currentIndex].tipps,\n          distance: 0,\n          TravelMode: \"Car\"\n        };\n      });\n    };\n\n    this.nextQuestionHander = () => {\n      this.setState({\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.afterMap = () => {\n      //var distanceKM = document.getElementById(\"Distance\").value;\n      //console.log(distanceKM)\n      console.log(this.state.distance);\n      this.setState({\n        currentIndex: this.state.currentIndex + 1 //distance: distanceKM\n\n      });\n    };\n\n    this.callbackSingleQuestion = (index, points, Travelmode) => {\n      const {\n        score,\n        currentIndex\n      } = this.state;\n\n      if (Travelmode === null) {\n        this.setState({\n          score: score + points\n        });\n      } else {\n        this.setState({\n          TravelMode: Travelmode\n        });\n      }\n\n      console.log(\"Inside callbackSingleQuestion\");\n      console.log(Travelmode);\n      this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n\n      if (currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      } else {\n        this.setState({\n          currentIndex: this.state.currentIndex + 1\n        });\n      }\n\n      console.log(this.state.TravelMode);\n    };\n\n    this.callbackPeople = (Adults, Childs) => {\n      this.setState({\n        adults: Adults,\n        children: Childs,\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.callbackDuration = (days, weeks) => {\n      this.setState({\n        days: days,\n        weeks: weeks,\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.callbackBaggage = (number, kilo) => {\n      this.setState({\n        num_baggage: 0,\n        kilo_baggage: 0,\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.finishHandler = () => {\n      if (this.state.currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      }\n    };\n  }\n\n  //Load the quiz once the component mounts\n  componentDidMount() {\n    this.loadQuiz();\n  } //Update the component\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      currentIndex\n    } = this.state;\n\n    if (this.state.currentIndex !== prevState.currentIndex) {\n      this.setState(() => {\n        return {\n          type: QuizData[currentIndex].type,\n          question: QuizData[currentIndex].question,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values\n        };\n      });\n    }\n  }\n  /*componentDidUpdate*/\n\n\n  render() {\n    const {\n      quizEnd,\n      type\n    } = this.state; //get the current state     \n\n    console.log(this.state.TravelMode);\n\n    if (quizEnd) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(QuizEnds, {\n          state: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (type === \"single\") {\n      return /*#__PURE__*/_jsxDEV(Singlequestion, {\n        state: this.state,\n        callbackSingleQuestion: this.callbackSingleQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"number\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Number, {\n          state: this.state,\n          callbackPeople: this.callbackPeople,\n          callbackDuration: this.callbackDuration,\n          callbackBaggage: this.callbackBaggage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"transport\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(LoadScript, {\n          googleMapsApiKey: key,\n          libraries: lib,\n          children: /*#__PURE__*/_jsxDEV(Map, {\n            score: this.state.score,\n            currentIndex: this.state.currentIndex,\n            question: this.state.question,\n            Travelmode: this.state.TravelMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"OwnSubmit\",\n          onClick: () => this.afterMap(),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"car\" && this.state.TravelMode === \"Car\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Car\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"flight\" && this.state.TravelMode === \"Flight\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"TEST\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this);\n    } else {\n      this.setState({\n        currentIndex: this.state.currentIndex + 1\n      });\n    }\n  }\n  /*render*/\n\n\n}\n/*Quiz*/\n\n\nQuiz.setDistance = distanceKM => {\n  Quiz.setState({\n    distance: distanceKM\n  });\n};\n\nexport default Quiz;","map":{"version":3,"sources":["/home/flo/Projects/HolirateFolder/react/Holirate/src/components/Quiz.js"],"names":["React","Component","QuizData","LoadScript","Map","Singlequestion","QuizEnds","Number","lib","key","Quiz","state","userAnswer","type","currentIndex","options","values","tipps","ChoosenTipps","quizEnd","score","distance","TravelMode","co2","adults","children","num_backpags","kilo_backpags","days","weeks","directions","bounds","loadQuiz","setState","question","nextQuestionHander","afterMap","console","log","callbackSingleQuestion","index","points","Travelmode","push","length","callbackPeople","Adults","Childs","callbackDuration","callbackBaggage","number","kilo","num_baggage","kilo_baggage","finishHandler","componentDidMount","componentDidUpdate","prevProps","prevState","render","setDistance","distanceKM"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { QuizData } from './Data/Fragen';\nimport './circle.css';\n//import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\nimport { LoadScript } from \"@react-google-maps/api\";\nimport Map from \"./Maps/maps\";\n\nimport Singlequestion from './SingleQuestion/singleQuestion';\nimport QuizEnds from './Score/quizEnd';\nimport Number from './Number/Number';\n\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\n\nclass Quiz extends Component {\n\n    state = {\n        userAnswer: null,    //current users answer\n        type: \"single\",         //question Type\n        currentIndex: 0,     //current questions index\n        options: [],        //the options\n        values: null,         //Values of Single or Multiple choice\n        tipps: null,\n        ChoosenTipps: [],\n        quizEnd: false,\n        score: 0,\n        distance: 0,\n        TravelMode: 'Car',\n        co2: 0,\n\n        adults: 0,\n        children: 0,\n\n        num_backpags:0,\n        kilo_backpags: 0,\n\n        days: 0,\n        weeks: 0,\n\n\n        directions: null,\n        bounds: null\n    }\n\n\n    //Component that holds the current quiz\n    loadQuiz = () => {\n        const { currentIndex } = this.state //get the current index\n        this.setState(() => {\n            return {\n                question: QuizData[currentIndex].question,\n                type: QuizData[currentIndex].type,\n                options: QuizData[currentIndex].options,\n                values: QuizData[currentIndex].values,\n                tipps: QuizData[currentIndex].tipps,\n                distance: 0,\n                TravelMode: \"Car\"\n            }\n        }\n        )\n    }\n    \n    static setDistance = (distanceKM) => {\n        this.setState({\n            distance: distanceKM\n        })\n    }\n\n    //Handles Click event for the next button\n    nextQuestionHander = () => {\n        this.setState({\n            currentIndex: this.state.currentIndex + 1\n        })\n    }\n\n    afterMap = () => {\n        //var distanceKM = document.getElementById(\"Distance\").value;\n        //console.log(distanceKM)\n        console.log(this.state.distance);\n        this.setState({\n            currentIndex: this.state.currentIndex + 1,\n            //distance: distanceKM\n        })\n    }\n\n    //Load the quiz once the component mounts\n    componentDidMount() {\n        this.loadQuiz();\n    }\n\n    //Update the component\n    componentDidUpdate(prevProps, prevState) {\n        const { currentIndex } = this.state;\n        if (this.state.currentIndex !== prevState.currentIndex) {\n            this.setState(() => {\n                return {\n                    type: QuizData[currentIndex].type,\n                    question: QuizData[currentIndex].question,\n                    options: QuizData[currentIndex].options,\n                    values: QuizData[currentIndex].values\n                }\n            });\n\n        }\n    }/*componentDidUpdate*/\n\n\n    callbackSingleQuestion = (index, points, Travelmode) => {\n        const {score, currentIndex} = this.state;\n        if(Travelmode === null){\n            this.setState({\n                score: score + points\n            });\n        }else{\n            this.setState({\n                TravelMode: Travelmode\n            })\n        }\n        console.log(\"Inside callbackSingleQuestion\");\n        console.log(Travelmode);\n\n        this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n\n        if (currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        } else {\n            this.setState({\n                currentIndex: this.state.currentIndex + 1\n            })\n        }\n        console.log(this.state.TravelMode);\n    }\n\n    callbackPeople = (Adults, Childs) =>{\n\n        this.setState({\n            adults: Adults,\n            children: Childs,\n            currentIndex: this.state.currentIndex + 1,\n        })\n    }\n\n    callbackDuration = (days, weeks) =>{\n\n        this.setState({\n            days: days,\n            weeks: weeks,\n            currentIndex: this.state.currentIndex + 1,\n        })\n    }\n\n\n    callbackBaggage = (number, kilo) =>{\n\n        this.setState({\n            num_baggage:0,\n            kilo_baggage: 0,\n            currentIndex: this.state.currentIndex + 1,\n        })\n\n    }\n\n    //Responds to the click of the finish button\n    finishHandler = () => {\n        if (this.state.currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        }\n\n    }\n\n\n    render() {\n        const {quizEnd, type } = this.state //get the current state     \n        console.log(this.state.TravelMode);\n\n        if (quizEnd) {\n            return (\n                <div>\n                    <QuizEnds state={this.state}/>\n                </div>\n            )\n        }\n        \n        if(type === \"single\") {\n            return(\n                <Singlequestion state={this.state} callbackSingleQuestion={this.callbackSingleQuestion}/>\n            )\n        } else if (type === \"number\") {\n            return (\n                <div>\n                    <Number state={this.state}  callbackPeople={this.callbackPeople} \n                                                callbackDuration={this.callbackDuration} \n                                                callbackBaggage={this.callbackBaggage}\n                    />                \n                </div >\n                )\n        } else if (type === \"transport\") {\n            return (\n                <div>\n                    <LoadScript googleMapsApiKey={key} libraries={lib}>\n                        <Map score={this.state.score} currentIndex={this.state.currentIndex} question={this.state.question} Travelmode={this.state.TravelMode}/>\n                    </LoadScript>\n                    <br></br>\n                    <div className=\"OwnSubmit\"\n                            onClick={() => this.afterMap()}>\n                        Submit</div>\n            </div > )\n        }else if (type === \"car\" && this.state.TravelMode === \"Car\"){\n            return(\n                <div>\n                    <h1>Car</h1>\n                </div>\n            )\n        }else if (type === \"flight\" && this.state.TravelMode === \"Flight\"){\n            return(\n                <div>\n                    <h1>TEST</h1>\n                </div>\n            )\n        }else{\n            this.setState({\n                currentIndex: this.state.currentIndex +1\n            })\n        }\n    }/*render*/\n\n}/*Quiz*/\n\n\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}