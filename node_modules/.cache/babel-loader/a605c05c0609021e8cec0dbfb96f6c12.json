{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/HolirateFolder/react/Holirate/src/components/Quiz.js\";\nimport React, { Component } from 'react';\nimport { QuizData } from './Data/Fragen';\nimport './circle.css'; //import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\n\nimport { LoadScript } from \"@react-google-maps/api\";\nimport Map from \"./Maps/maps\";\nimport Singlequestion from './SingleQuestion/singleQuestion';\nimport QuizEnds from './Score/quizEnd';\nimport Number from './Number/Number';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userAnswer: null,\n      //current users answer\n      type: \"single\",\n      //question Type\n      currentIndex: 0,\n      //current questions index\n      options: [],\n      //the options\n      values: null,\n      //Values of Single or Multiple choice\n      tipps: null,\n      ChoosenTipps: [],\n      quizEnd: false,\n      score: 0,\n      disabled: true,\n      distance: 0,\n      TravelMode: 'DRIVING',\n      co2: 0,\n      adults: 0,\n      children: 0,\n      num_backpags: 0,\n      kilo_backpags: 0,\n      directions: null,\n      bounds: null\n    };\n\n    this.loadQuiz = () => {\n      const {\n        currentIndex\n      } = this.state; //get the current index\n\n      this.setState(() => {\n        return {\n          question: QuizData[currentIndex].question,\n          type: QuizData[currentIndex].type,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values,\n          tipps: QuizData[currentIndex].tipps,\n          distance: 0\n        };\n      });\n    };\n\n    this.nextQuestionHander = () => {\n      const {\n        userAnswer,\n        score\n      } = this.state;\n      this.setState({\n        score: score + userAnswer,\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.afterMap = () => {\n      //var distanceKM = document.getElementById(\"Distance\").value;\n      //console.log(distanceKM)\n      console.log(this.state.distance);\n      this.setState({\n        currentIndex: this.state.currentIndex + 1 //distance: distanceKM\n\n      });\n    };\n\n    this.checkAnswer = (answer, index) => {\n      const {\n        currentIndex,\n        score\n      } = this.state;\n      var nextQuestion = 1;\n\n      if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\n        console.log(\"1. Flugzeug\");\n        nextQuestion = 2;\n      } else if (QuizData[currentIndex].options[index] === \"Auto\" || QuizData[currentIndex].options[index] === \"Fahrad\" || QuizData[currentIndex].options[index] === \"Zug\") {\n        console.log(QuizData[currentIndex].options[index]);\n        nextQuestion = 1;\n      } else {\n        this.setState({\n          disabled: false,\n          score: score + QuizData[currentIndex].values[index]\n        });\n      }\n\n      this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n\n      if (currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      } else {\n        this.setState({\n          currentIndex: this.state.currentIndex + nextQuestion\n        });\n      }\n    };\n\n    this.finishHandler = () => {\n      if (this.state.currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      }\n    };\n  }\n\n  //Load the quiz once the component mounts\n  componentDidMount() {\n    this.loadQuiz();\n  } //Update the component\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      currentIndex\n    } = this.state;\n\n    if (this.state.currentIndex !== prevState.currentIndex) {\n      this.setState(() => {\n        return {\n          disabled: true,\n          type: QuizData[currentIndex].type,\n          question: QuizData[currentIndex].question,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values\n        };\n      });\n    }\n  }\n  /*componentDidUpdate*/\n  //Check the answer\n\n\n  /*checkAnswer*/\n  callbackNumber() {}\n  /*\n  checkNumber = (index) => {\n      const { currentIndex } = this.state;\n      console.log(currentIndex);\n        this.setState({\n          disabled: false,\n          currentIndex: this.state.currentIndex + 1\n      })\n  }\n  */\n  //Responds to the click of the finish button\n\n\n  render() {\n    const {\n      quizEnd,\n      type\n    } = this.state; //get the current state       \n\n    if (quizEnd) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(QuizEnds, {\n          state: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (type === \"single\") {\n      return /*#__PURE__*/_jsxDEV(Singlequestion, {\n        state: this.state,\n        checkAnswer: this.checkAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"number\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Number, {\n          state: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"transport\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(LoadScript, {\n          googleMapsApiKey: key,\n          libraries: lib,\n          children: /*#__PURE__*/_jsxDEV(Map, {\n            score: this.state.score,\n            currentIndex: this.state.currentIndex,\n            question: this.state.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"OwnSubmit\",\n          onClick: () => this.afterMap(),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this);\n    }\n  }\n  /*render*/\n\n\n}\n/*Quiz*/\n\n\nQuiz.setDistance = distanceKM => {\n  Quiz.setState({\n    distance: distanceKM\n  });\n};\n\nexport default Quiz;","map":{"version":3,"sources":["/home/flo/Projects/HolirateFolder/react/Holirate/src/components/Quiz.js"],"names":["React","Component","QuizData","LoadScript","Map","Singlequestion","QuizEnds","Number","lib","key","Quiz","state","userAnswer","type","currentIndex","options","values","tipps","ChoosenTipps","quizEnd","score","disabled","distance","TravelMode","co2","adults","children","num_backpags","kilo_backpags","directions","bounds","loadQuiz","setState","question","nextQuestionHander","afterMap","console","log","checkAnswer","answer","index","nextQuestion","push","length","finishHandler","componentDidMount","componentDidUpdate","prevProps","prevState","callbackNumber","render","setDistance","distanceKM"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { QuizData } from './Data/Fragen';\nimport './circle.css';\n//import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\nimport { LoadScript } from \"@react-google-maps/api\";\nimport Map from \"./Maps/maps\";\n\nimport Singlequestion from './SingleQuestion/singleQuestion';\nimport QuizEnds from './Score/quizEnd';\nimport Number from './Number/Number';\n\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\n\nclass Quiz extends Component {\n\n    state = {\n        userAnswer: null,    //current users answer\n        type: \"single\",         //question Type\n        currentIndex: 0,     //current questions index\n        options: [],        //the options\n        values: null,         //Values of Single or Multiple choice\n        tipps: null,\n        ChoosenTipps: [],\n        quizEnd: false,\n        score: 0,\n        disabled: true,\n        distance: 0,\n        TravelMode: 'DRIVING',\n        co2: 0,\n\n        adults: 0,\n        children: 0,\n\n        num_backpags:0,\n        kilo_backpags: 0,\n\n\n        directions: null,\n        bounds: null\n    }\n\n\n    //Component that holds the current quiz\n    loadQuiz = () => {\n        const { currentIndex } = this.state //get the current index\n        this.setState(() => {\n            return {\n                question: QuizData[currentIndex].question,\n                type: QuizData[currentIndex].type,\n                options: QuizData[currentIndex].options,\n                values: QuizData[currentIndex].values,\n                tipps: QuizData[currentIndex].tipps,\n                distance: 0\n            }\n        }\n        )\n    }\n    \n    static setDistance = (distanceKM) => {\n        this.setState({\n            distance: distanceKM\n        })\n    }\n\n    //Handles Click event for the next button\n    nextQuestionHander = () => {\n        const { userAnswer, score } = this.state\n        this.setState({\n            score: score + userAnswer,\n            currentIndex: this.state.currentIndex + 1\n        })\n    }\n\n    afterMap = () => {\n        //var distanceKM = document.getElementById(\"Distance\").value;\n        //console.log(distanceKM)\n        console.log(this.state.distance);\n        this.setState({\n            currentIndex: this.state.currentIndex + 1,\n            //distance: distanceKM\n        })\n    }\n\n    //Load the quiz once the component mounts\n    componentDidMount() {\n        this.loadQuiz();\n    }\n\n    //Update the component\n    componentDidUpdate(prevProps, prevState) {\n        const { currentIndex } = this.state;\n        if (this.state.currentIndex !== prevState.currentIndex) {\n            this.setState(() => {\n                return {\n                    disabled: true,\n                    type: QuizData[currentIndex].type,\n                    question: QuizData[currentIndex].question,\n                    options: QuizData[currentIndex].options,\n                    values: QuizData[currentIndex].values\n\n                }\n            });\n\n        }\n    }/*componentDidUpdate*/\n\n\n    //Check the answer\n    checkAnswer = (answer, index) => {\n        const { currentIndex, score } = this.state;\n        var nextQuestion = 1;\n        if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\n            console.log(\"1. Flugzeug\");\n            nextQuestion = 2;\n        } else if (QuizData[currentIndex].options[index] === \"Auto\" ||\n            QuizData[currentIndex].options[index] === \"Fahrad\" ||\n            QuizData[currentIndex].options[index] === \"Zug\") \n            {\n            console.log(QuizData[currentIndex].options[index]);\n            nextQuestion = 1;\n        } else {\n            this.setState({\n                disabled: false,\n                score: score + QuizData[currentIndex].values[index]\n            })\n        }\n        this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n\n        if (currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        } else {\n            this.setState({\n                currentIndex: this.state.currentIndex + nextQuestion\n            })\n        }\n    }/*checkAnswer*/\n\n    callbackNumber(){\n\n    }\n\n    /*\n    checkNumber = (index) => {\n        const { currentIndex } = this.state;\n        console.log(currentIndex);\n\n\n        this.setState({\n            disabled: false,\n            currentIndex: this.state.currentIndex + 1\n        })\n    }\n*/\n    //Responds to the click of the finish button\n    finishHandler = () => {\n        if (this.state.currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        }\n\n    }\n\n\n    render() {\n        const {quizEnd, type } = this.state //get the current state       \n        if (quizEnd) {\n            return (\n                <div>\n                    <QuizEnds state={this.state}/>\n                </div>\n            )\n        }\n        \n        if(type === \"single\") {\n            return(\n                <Singlequestion state={this.state} checkAnswer={this.checkAnswer}/>\n            )\n        } else if (type === \"number\") {\n            return (\n                <div>\n                    <Number state={this.state}/>                \n                </div >\n                )\n        } else if (type === \"transport\") {\n            return (\n                <div>\n                    <LoadScript googleMapsApiKey={key} libraries={lib}>\n                        <Map score={this.state.score} currentIndex={this.state.currentIndex} question={this.state.question}/>\n                    </LoadScript>\n                    <br></br>\n                    <div className=\"OwnSubmit\"\n                            onClick={() => this.afterMap()}>\n                        Submit</div>\n            </div > )\n        }\n    }/*render*/\n\n}/*Quiz*/\n\n\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}