{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/react/holirate/src/components/Maps/maps.js\";\n\n/*global google*/\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport { GoogleMap, StandaloneSearchBox, DirectionsRenderer } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultLocation = {\n  lat: 40.756795,\n  lng: -73.954298\n};\nlet destination = {\n  lat: 41.756795,\n  lng: -78.954298\n};\nlet origin = {\n  lat: 40.756795,\n  lng: -73.954298\n};\nlet directionsService;\n\nclass Map extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      directions: null,\n      bounds: null\n    };\n\n    this.onMapLoad = map => {\n      directionsService = new google.maps.DirectionsService(); //load default origin and destination\n\n      this.changeDirection(origin, destination);\n    };\n\n    this.onSBLoad = ref => {\n      this.searchBox = ref;\n    };\n\n    this.onPlacesChanged = () => {\n      //pass the new place location as the origin\n      this.changeDirection(this.searchBox.getPlaces()[0].geometry.location, destination);\n    };\n\n    this.changeDirection = (origin, destination) => {\n      directionsService.route({\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.DRIVING\n      }, (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          //changing the state of directions to the result of direction service\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"searchbox\",\n        children: /*#__PURE__*/_jsxDEV(StandaloneSearchBox, {\n          onLoad: this.onSBLoad,\n          onPlacesChanged: this.onPlacesChanged,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Customized your placeholder\",\n            style: {\n              boxSizing: `border-box`,\n              border: `1px solid transparent`,\n              width: `240px`,\n              height: `32px`,\n              padding: `0 12px`,\n              borderRadius: `3px`,\n              boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n              fontSize: `14px`,\n              outline: `none`,\n              textOverflow: `ellipses`,\n              position: \"absolute\",\n              left: \"50%\",\n              marginLeft: \"-120px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n          center: defaultLocation,\n          zoom: 5,\n          onLoad: map => this.onMapLoad(map),\n          mapContainerStyle: {\n            height: \"40vh\",\n            width: \"80vw\"\n          },\n          children: this.state.directions !== null && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n            directions: this.state.directions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/flo/Projects/react/holirate/src/components/Maps/maps.js"],"names":["ReactDOM","React","GoogleMap","StandaloneSearchBox","DirectionsRenderer","defaultLocation","lat","lng","destination","origin","directionsService","Map","Component","state","directions","bounds","onMapLoad","map","google","maps","DirectionsService","changeDirection","onSBLoad","ref","searchBox","onPlacesChanged","getPlaces","geometry","location","route","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","setState","console","error","render","boxSizing","border","width","height","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","position","left","marginLeft"],"mappings":";;AAAA;AACA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,SADF,EAEEC,mBAFF,EAGEC,kBAHF,QAIO,wBAJP;;AAMA,MAAMC,eAAe,GAAG;AAAEC,EAAAA,GAAG,EAAE,SAAP;AAAkBC,EAAAA,GAAG,EAAE,CAAC;AAAxB,CAAxB;AACA,IAAIC,WAAW,GAAG;AAAEF,EAAAA,GAAG,EAAE,SAAP;AAAkBC,EAAAA,GAAG,EAAE,CAAC;AAAxB,CAAlB;AACA,IAAIE,MAAM,GAAG;AAAEH,EAAAA,GAAG,EAAE,SAAP;AAAkBC,EAAAA,GAAG,EAAE,CAAC;AAAxB,CAAb;AACA,IAAIG,iBAAJ;;AACA,MAAMC,GAAN,SAAkBV,KAAK,CAACW,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,UAAU,EAAE,IADN;AAENC,MAAAA,MAAM,EAAE;AAFF,KADwB;;AAAA,SAMhCC,SANgC,GAMpBC,GAAG,IAAI;AACjBP,MAAAA,iBAAiB,GAAG,IAAIQ,MAAM,CAACC,IAAP,CAAYC,iBAAhB,EAApB,CADiB,CAEjB;;AACA,WAAKC,eAAL,CAAqBZ,MAArB,EAA6BD,WAA7B;AACD,KAV+B;;AAAA,SAahCc,QAbgC,GAarBC,GAAG,IAAI;AAChB,WAAKC,SAAL,GAAiBD,GAAjB;AACD,KAf+B;;AAAA,SAiBhCE,eAjBgC,GAiBd,MAAM;AACtB;AACA,WAAKJ,eAAL,CACE,KAAKG,SAAL,CAAeE,SAAf,GAA2B,CAA3B,EAA8BC,QAA9B,CAAuCC,QADzC,EAEEpB,WAFF;AAID,KAvB+B;;AAAA,SA0BhCa,eA1BgC,GA0Bd,CAACZ,MAAD,EAASD,WAAT,KAAyB;AACzCE,MAAAA,iBAAiB,CAACmB,KAAlB,CACE;AACEpB,QAAAA,MAAM,EAAEA,MADV;AAEED,QAAAA,WAAW,EAAEA,WAFf;AAGEsB,QAAAA,UAAU,EAAEZ,MAAM,CAACC,IAAP,CAAYY,UAAZ,CAAuBC;AAHrC,OADF,EAME,CAACC,MAAD,EAASC,MAAT,KAAoB;AAClB,YAAIA,MAAM,KAAKhB,MAAM,CAACC,IAAP,CAAYgB,gBAAZ,CAA6BC,EAA5C,EAAgD;AAC9C;AACA,eAAKC,QAAL,CAAc;AACZvB,YAAAA,UAAU,EAAEmB;AADA,WAAd;AAGD,SALD,MAKO;AACLK,UAAAA,OAAO,CAACC,KAAR,CAAe,6BAA4BN,MAAO,EAAlD;AACD;AACF,OAfH;AAiBD,KA5C+B;AAAA;;AA8ChCO,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAK,QAAA,EAAE,EAAC,WAAR;AAAA,+BACE,QAAC,mBAAD;AACE,UAAA,MAAM,EAAE,KAAKlB,QADf;AAEE,UAAA,eAAe,EAAE,KAAKG,eAFxB;AAAA,iCAIE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,WAAW,EAAC,6BAFd;AAGE,YAAA,KAAK,EAAE;AACLgB,cAAAA,SAAS,EAAG,YADP;AAELC,cAAAA,MAAM,EAAG,uBAFJ;AAGLC,cAAAA,KAAK,EAAG,OAHH;AAILC,cAAAA,MAAM,EAAG,MAJJ;AAKLC,cAAAA,OAAO,EAAG,QALL;AAMLC,cAAAA,YAAY,EAAG,KANV;AAOLC,cAAAA,SAAS,EAAG,8BAPP;AAQLC,cAAAA,QAAQ,EAAG,MARN;AASLC,cAAAA,OAAO,EAAG,MATL;AAULC,cAAAA,YAAY,EAAG,UAVV;AAWLC,cAAAA,QAAQ,EAAE,UAXL;AAYLC,cAAAA,IAAI,EAAE,KAZD;AAaLC,cAAAA,UAAU,EAAE;AAbP;AAHT;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eA2BE;AAAA;AAAA;AAAA;AAAA,cA3BF,eA4BE;AAAA,+BACE,QAAC,SAAD;AACE,UAAA,MAAM,EAAEhD,eADV;AAEE,UAAA,IAAI,EAAE,CAFR;AAGE,UAAA,MAAM,EAAEY,GAAG,IAAI,KAAKD,SAAL,CAAeC,GAAf,CAHjB;AAIE,UAAA,iBAAiB,EAAE;AAAE2B,YAAAA,MAAM,EAAE,MAAV;AAAkBD,YAAAA,KAAK,EAAE;AAAzB,WAJrB;AAAA,oBAMG,KAAK9B,KAAL,CAAWC,UAAX,KAA0B,IAA1B,iBACC,QAAC,kBAAD;AAAoB,YAAA,UAAU,EAAE,KAAKD,KAAL,CAAWC;AAA3C;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA5BF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA2CD;;AA1F+B;;AA6FlC,eAAeH,GAAf","sourcesContent":["/*global google*/\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\n\nimport {\n  GoogleMap,\n  StandaloneSearchBox,\n  DirectionsRenderer\n} from \"@react-google-maps/api\";\n\nconst defaultLocation = { lat: 40.756795, lng: -73.954298 };\nlet destination = { lat: 41.756795, lng: -78.954298 };\nlet origin = { lat: 40.756795, lng: -73.954298 };\nlet directionsService;\nclass Map extends React.Component {\n  state = {\n    directions: null,\n    bounds: null\n  };\n\n  onMapLoad = map => {\n    directionsService = new google.maps.DirectionsService();\n    //load default origin and destination\n    this.changeDirection(origin, destination);\n  };\n\n  //function that is called when SearchBox has loaded and assigned ref to this.searchbox  to get the searchbox object\n  onSBLoad = ref => {\n    this.searchBox = ref;\n  };\n\n  onPlacesChanged = () => {\n    //pass the new place location as the origin\n    this.changeDirection(\n      this.searchBox.getPlaces()[0].geometry.location,\n      destination\n    );\n  };\n\n  //function that is calling the directions service\n  changeDirection = (origin, destination) => {\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.DRIVING\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          //changing the state of directions to the result of direction service\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <div id=\"searchbox\">\n          <StandaloneSearchBox\n            onLoad={this.onSBLoad}\n            onPlacesChanged={this.onPlacesChanged}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Customized your placeholder\"\n              style={{\n                boxSizing: `border-box`,\n                border: `1px solid transparent`,\n                width: `240px`,\n                height: `32px`,\n                padding: `0 12px`,\n                borderRadius: `3px`,\n                boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n                fontSize: `14px`,\n                outline: `none`,\n                textOverflow: `ellipses`,\n                position: \"absolute\",\n                left: \"50%\",\n                marginLeft: \"-120px\"\n              }}\n            />\n          </StandaloneSearchBox>\n        </div>\n        <br />\n        <div>\n          <GoogleMap\n            center={defaultLocation}\n            zoom={5}\n            onLoad={map => this.onMapLoad(map)}\n            mapContainerStyle={{ height: \"40vh\", width: \"80vw\" }}\n          >\n            {this.state.directions !== null && (\n              <DirectionsRenderer directions={this.state.directions} />\n            )}\n          </GoogleMap>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}