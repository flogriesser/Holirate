{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/react/Holirate/src/components/Score/quizEnd.js\";\n\n/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 10:29:35 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-06-12 08:35:57\n */\nimport { Component } from \"react\";\nimport { carValues } from \"../Data/Data\";\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Box from \"@material-ui/core/Box\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { FormControlLabel } from \"@material-ui/core\";\nimport { ScoreBoard, DataCard } from \"../stylesUI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass QuizEnds extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.calculateCar = (distance, carPower, carType) => {\n      //const {distance, carType, carPower} = this.props.state;\n      var Factor = carValues[carPower][carType];\n      return (Factor * distance).toFixed(0);\n    };\n\n    this.calculateTrain = () => {\n      const {\n        distance\n      } = this.props.state;\n      return (0.032 * distance).toFixed(0);\n    };\n\n    this.calculateFlight = distance => {\n      return (0.369 * distance).toFixed(0);\n    };\n\n    this.calcScore = co2 => {\n      var score = 0;\n      score = 75 - co2 * 75 / 2500;\n\n      if (co2 > 2500) {\n        score = 0;\n      }\n\n      return score;\n    };\n\n    this.compareCo2 = (TravelMode, co2) => {};\n  }\n\n  render() {\n    const {\n      score,\n      distance,\n      ChoosenTipps,\n      ChoosenHeadlines,\n      TravelMode,\n      carPower,\n      carType\n    } = this.props.state;\n    var co2 = 0;\n    var EndScore = score;\n\n    if (TravelMode === 'Car') {\n      co2 = this.calculateCar(distance, carPower, carType);\n    } else if (TravelMode === 'Train') {\n      co2 = this.calculateTrain(distance);\n    } else if (TravelMode === 'Fligth') {\n      co2 = this.calculateFlight(distance);\n    }\n\n    console.log(ChoosenHeadlines);\n    console.log(ChoosenHeadlines[0]);\n    EndScore = (EndScore + this.calcScore(co2)).toFixed(0);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 12,\n        maxwidth: \"false\",\n        align: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          children: \"Dein Holirate Rating ist fertig!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n          EndScore: EndScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          maxwidth: \"false\",\n          align: \"center\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(DataCard, {\n              Value: distance,\n              Type: \"Kilometer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(DataCard, {\n              Value: co2,\n              Type: \"C02\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            xs: 12,\n            children: ChoosenTipps.map((tipp, index) =>\n            /*#__PURE__*/\n            //for each option, new paragrap\n            _jsxDEV(DataCard, {\n              value: index,\n              Type: tipp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            name: \"quiz\",\n            value: this.indexValue,\n            onChange: this.radioHandler,\n            children: ChoosenTipps.map((tipp, index) =>\n            /*#__PURE__*/\n            //for each option, new paragrap\n            _jsxDEV(FormControlLabel, {\n              value: index + 1,\n              //for dumb unique key\n              control: /*#__PURE__*/_jsxDEV(DataCard, {\n                value: ChoosenHeadlines[0],\n                Type: tipp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 50\n              }, this),\n              label: tipp\n            }, index + 1, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default QuizEnds;","map":{"version":3,"sources":["/home/flo/Projects/react/Holirate/src/components/Score/quizEnd.js"],"names":["Component","carValues","FormLabel","FormControl","Box","Grid","Typography","FormControlLabel","ScoreBoard","DataCard","QuizEnds","calculateCar","distance","carPower","carType","Factor","toFixed","calculateTrain","props","state","calculateFlight","calcScore","co2","score","compareCo2","TravelMode","render","ChoosenTipps","ChoosenHeadlines","EndScore","console","log","map","tipp","index","indexValue","radioHandler"],"mappings":"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","sourcesContent":["/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 10:29:35 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-06-12 08:35:57\n */\n\nimport { Component } from \"react\";\nimport { carValues } from \"../Data/Data\";\nimport FormLabel from '@material-ui/core/FormLabel'\nimport FormControl from '@material-ui/core/FormControl';\nimport Box from \"@material-ui/core/Box\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { FormControlLabel } from \"@material-ui/core\";\n\n\n\nimport { ScoreBoard, DataCard } from \"../stylesUI\";\n\n\nclass QuizEnds extends Component {\n    calculateCar = (distance, carPower, carType) => {\n        //const {distance, carType, carPower} = this.props.state;\n\n        var Factor = carValues[carPower][carType];\n\n\n\n        return (Factor * distance).toFixed(0);\n    }\n\n    calculateTrain = () => {\n        const { distance } = this.props.state;\n\n        return (0.032 * distance).toFixed(0);\n    }\n    calculateFlight = (distance) => {\n\n        return (0.369 * distance).toFixed(0);\n    }\n\n    calcScore = (co2) => {\n        var score = 0;\n\n        score = 75 - co2 * 75 / 2500;\n\n        if (co2 > 2500) {\n            score = 0;\n        }\n\n        return score;\n    }\n\n    compareCo2 = (TravelMode, co2) => {\n\n\n    }\n\n\n    render() {\n        const { score, distance, ChoosenTipps, ChoosenHeadlines, TravelMode, carPower, carType } = this.props.state;\n        var co2 = 0;\n        var EndScore = score;\n        if (TravelMode === 'Car') {\n            co2 = this.calculateCar(distance, carPower, carType);\n        }\n        else if (TravelMode === 'Train') {\n            co2 = this.calculateTrain(distance);\n        }\n        else if (TravelMode === 'Fligth') {\n            co2 = this.calculateFlight(distance);\n        }\n        console.log(ChoosenHeadlines);\n        console.log(ChoosenHeadlines[0]);\n        EndScore = (EndScore + this.calcScore(co2)).toFixed(0);\n\n        return (\n            <div>\n                <Grid container spacing={12} maxwidth=\"false\" align=\"center\" justifyContent=\"center\" alignItems=\"center\" >\n                    <Typography variant=\"h4\">Dein Holirate Rating ist fertig!</Typography>\n\n                    <ScoreBoard EndScore={EndScore}></ScoreBoard>\n\n                    <Grid container maxwidth=\"false\" align=\"center\" justifyContent=\"center\" alignItems=\"center\" >\n                        <Grid item xs={6}>\n                            <DataCard Value={distance} Type=\"Kilometer\"></DataCard>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DataCard Value={co2} Type=\"C02\"></DataCard>\n                        </Grid>\n\n                        <Grid container xs={12}>\n                            {\n                                ChoosenTipps.map((tipp, index) => (  //for each option, new paragrap\n                                    <DataCard\n                                            value={index} Type={tipp}\n                                        />\n                                ))\n                            }\n                        </Grid>\n                        <Box name=\"quiz\" value={this.indexValue} onChange={this.radioHandler}>\n                            {\n                                ChoosenTipps.map((tipp, index) => (  //for each option, new paragrap\n                                    <FormControlLabel value={index + 1}\n                                        key={index + 1}//for dumb unique key\n                                        control={<DataCard\n                                            value={ChoosenHeadlines[0]} Type={tipp}\n                                        />}\n                                        label={tipp} />\n                                ))\n                            }\n                        </Box>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    };\n}\n\nexport default QuizEnds;"]},"metadata":{},"sourceType":"module"}