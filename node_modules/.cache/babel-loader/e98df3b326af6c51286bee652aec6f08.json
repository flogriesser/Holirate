{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/HolirateFolder/react/Holirate/src/components/Quiz.js\";\nimport React, { Component } from 'react';\nimport { QuizData } from './Data/Fragen';\nimport './circle.css'; //import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\n\nimport { LoadScript } from \"@react-google-maps/api\";\nimport Map from \"./Maps/maps\";\nimport Singlequestion from './SingleQuestion/singleQuestion';\nimport QuizEnds from './Score/quizEnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\n\nvar distance = 0;\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userAnswer: null,\n      //current users answer\n      type: \"single\",\n      //question Type\n      currentIndex: 0,\n      //current questions index\n      options: [],\n      //the options\n      values: null,\n      //Values of Single or Multiple choice\n      tipps: null,\n      ChoosenTipps: [],\n      quizEnd: false,\n      score: 0,\n      disabled: true,\n\n      /*distance: 0,*/\n      TravelMode: 'DRIVING',\n      co2: 0,\n      directions: null,\n      bounds: null\n    };\n\n    this.loadQuiz = () => {\n      const {\n        currentIndex\n      } = this.state; //get the current index\n\n      this.setState(() => {\n        return {\n          question: QuizData[currentIndex].question,\n          type: QuizData[currentIndex].type,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values,\n          tipps: QuizData[currentIndex].tipps\n          /*distance: 0,*/\n\n        };\n      });\n    };\n\n    this.nextQuestionHander = () => {\n      const {\n        userAnswer,\n        score\n      } = this.state;\n      this.setState({\n        score: score + userAnswer,\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.afterMap = () => {\n      //var distanceKM = document.getElementById(\"Distance\").value;\n      //console.log(distanceKM)\n      console.log(distance);\n      this.setState({\n        currentIndex: this.state.currentIndex + 1 //distance: distanceKM\n\n      });\n    };\n\n    this.checkAnswer = (answer, index) => {\n      const {\n        currentIndex,\n        score\n      } = this.state;\n      var nextQuestion = 1;\n\n      if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\n        console.log(\"1. Flugzeug\");\n        nextQuestion = 2;\n      } else if (QuizData[currentIndex].options[index] === \"Auto\" || QuizData[currentIndex].options[index] === \"Fahrad\" || QuizData[currentIndex].options[index] === \"Zug\") {\n        console.log(QuizData[currentIndex].options[index]);\n        nextQuestion = 1;\n      } else {\n        this.setState({\n          disabled: false,\n          score: score + QuizData[currentIndex].values[index]\n        });\n      }\n\n      this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n\n      if (currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      } else {\n        this.setState({\n          currentIndex: this.state.currentIndex + nextQuestion\n        });\n      }\n    };\n\n    this.checkNumber = index => {\n      const {\n        currentIndex\n      } = this.state;\n      console.log(currentIndex);\n      this.setState({\n        disabled: false,\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.finishHandler = () => {\n      if (this.state.currentIndex === QuizData.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      }\n    };\n  }\n\n  //Load the quiz once the component mounts\n  componentDidMount() {\n    this.loadQuiz();\n  } //Update the component\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      currentIndex\n    } = this.state;\n\n    if (this.state.currentIndex !== prevState.currentIndex) {\n      this.setState(() => {\n        return {\n          disabled: true,\n          type: QuizData[currentIndex].type,\n          question: QuizData[currentIndex].question,\n          options: QuizData[currentIndex].options,\n          values: QuizData[currentIndex].values\n        };\n      });\n    }\n  } //Check the answer\n\n\n  /******************************************************************** */\n\n  /*                 RENDER                                             */\n\n  /******************************************************************** */\n  render() {\n    const {\n      question,\n      options,\n      currentIndex,\n      quizEnd,\n      type\n    } = this.state; //get the current state       \n\n    if (quizEnd) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(QuizEnds, {\n          score: this.state.score,\n          distance: distance,\n          ChoosenTipps: this.state.ChoosenTipps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (type === \"single\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Singlequestion, {\n          quizQuestions: question,\n          quizOptions: options,\n          datafromQuiz: currentIndex,\n          score: this.state.score,\n          checkAnswer: this.checkAnswer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"number\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"hud\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hud-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hud-prefix\",\n              children: [\"Question \", currentIndex + 1, \" / \", QuizData.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"progressBar\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"progressBarFull\",\n                style: {\n                  width: `${currentIndex / QuizData.length * 100}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hud-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hud-prefix\",\n              children: \"Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"hud-main-text\",\n              id: \"score\",\n              children: this.state.score\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), options.map((option, index) =>\n        /*#__PURE__*/\n        //for each option, new paragrap\n        _jsxDEV(\"div\", {\n          className: `options-container`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"options-text\",\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"OwnInput\",\n            type: \"number\",\n            id: index,\n            name: \"quantity\",\n            min: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"OwnSubmit\",\n          onClick: () => this.checkNumber(),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this);\n    } else if (type === \"transport\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"hud\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hud-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hud-prefix\",\n              children: [\"Question \", currentIndex + 1, \" / \", QuizData.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"progressBar\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"progressBarFull\",\n                style: {\n                  width: `${currentIndex / QuizData.length * 100}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hud-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hud-prefix\",\n              children: \"Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"hud-main-text\",\n              id: \"score\",\n              children: this.state.score\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LoadScript, {\n          googleMapsApiKey: key,\n          libraries: lib,\n          children: /*#__PURE__*/_jsxDEV(Map, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"OwnSubmit\",\n          onClick: () => this.afterMap(),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this);\n    }\n  }\n  /******************************************************************** */\n\n  /*                 RENDER                                             */\n\n  /******************************************************************** */\n\n\n}\n\nQuiz.setDistance = distanceKM => {\n  distance = distanceKM;\n};\n\nexport default Quiz;","map":{"version":3,"sources":["/home/flo/Projects/HolirateFolder/react/Holirate/src/components/Quiz.js"],"names":["React","Component","QuizData","LoadScript","Map","Singlequestion","QuizEnds","lib","key","distance","Quiz","state","userAnswer","type","currentIndex","options","values","tipps","ChoosenTipps","quizEnd","score","disabled","TravelMode","co2","directions","bounds","loadQuiz","setState","question","nextQuestionHander","afterMap","console","log","checkAnswer","answer","index","nextQuestion","push","length","checkNumber","finishHandler","componentDidMount","componentDidUpdate","prevProps","prevState","render","width","map","option","setDistance","distanceKM"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { QuizData } from './Data/Fragen';\nimport './circle.css';\n//import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\nimport { LoadScript } from \"@react-google-maps/api\";\nimport Map from \"./Maps/maps\";\n\nimport Singlequestion from './SingleQuestion/singleQuestion';\nimport QuizEnds from './Score/quizEnd';\n\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\nvar distance = 0;\n\nclass Quiz extends Component {\n\n    state = {\n        userAnswer: null,    //current users answer\n        type: \"single\",         //question Type\n        currentIndex: 0,     //current questions index\n        options: [],        //the options\n        values: null,         //Values of Single or Multiple choice\n        tipps: null,\n        ChoosenTipps: [],\n        quizEnd: false,\n        score: 0,\n        disabled: true,\n        /*distance: 0,*/\n        TravelMode: 'DRIVING',\n        co2: 0,\n\n        directions: null,\n        bounds: null\n    }\n\n\n    //Component that holds the current quiz\n    loadQuiz = () => {\n        const { currentIndex } = this.state //get the current index\n        this.setState(() => {\n            return {\n                question: QuizData[currentIndex].question,\n                type: QuizData[currentIndex].type,\n                options: QuizData[currentIndex].options,\n                values: QuizData[currentIndex].values,\n                tipps: QuizData[currentIndex].tipps,\n                 /*distance: 0,*/\n            }\n        }\n        )\n    }\n    \n    static setDistance = (distanceKM) => {\n        distance = distanceKM;\n    }\n\n    //Handles Click event for the next button\n    nextQuestionHander = () => {\n        const { userAnswer, score } = this.state\n        this.setState({\n            score: score + userAnswer,\n            currentIndex: this.state.currentIndex + 1\n        })\n    }\n\n    afterMap = () => {\n        //var distanceKM = document.getElementById(\"Distance\").value;\n        //console.log(distanceKM)\n        console.log(distance);\n        this.setState({\n            currentIndex: this.state.currentIndex + 1,\n            //distance: distanceKM\n        })\n    }\n\n    //Load the quiz once the component mounts\n    componentDidMount() {\n        this.loadQuiz();\n    }\n\n    //Update the component\n    componentDidUpdate(prevProps, prevState) {\n        const { currentIndex } = this.state;\n        if (this.state.currentIndex !== prevState.currentIndex) {\n            this.setState(() => {\n                return {\n                    disabled: true,\n                    type: QuizData[currentIndex].type,\n                    question: QuizData[currentIndex].question,\n                    options: QuizData[currentIndex].options,\n                    values: QuizData[currentIndex].values\n\n                }\n            });\n\n        }\n    }\n\n    //Check the answer\n    checkAnswer = (answer, index) => {\n        const { currentIndex, score } = this.state;\n        var nextQuestion = 1;\n        if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\n            console.log(\"1. Flugzeug\");\n            nextQuestion = 2;\n        } else if (QuizData[currentIndex].options[index] === \"Auto\" ||\n            QuizData[currentIndex].options[index] === \"Fahrad\" ||\n            QuizData[currentIndex].options[index] === \"Zug\") \n            {\n            console.log(QuizData[currentIndex].options[index]);\n            nextQuestion = 1;\n        } else {\n            this.setState({\n                disabled: false,\n                score: score + QuizData[currentIndex].values[index]\n            })\n        }\n        this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n\n        if (currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        } else {\n            this.setState({\n                currentIndex: this.state.currentIndex + nextQuestion\n            })\n        }\n    }\n\n    checkNumber = (index) => {\n        const { currentIndex } = this.state;\n        console.log(currentIndex);\n\n\n        this.setState({\n            disabled: false,\n            currentIndex: this.state.currentIndex + 1\n        })\n    }\n\n    //Responds to the click of the finish button\n    finishHandler = () => {\n        if (this.state.currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        }\n\n    }\n\n\n/******************************************************************** */\n/*                 RENDER                                             */\n/******************************************************************** */\n\n    render() {\n        const { question, options, currentIndex, quizEnd, type } = this.state //get the current state       \n        if (quizEnd) {\n\n            return (\n                <div>\n                    <QuizEnds score = {this.state.score} distance ={distance} ChoosenTipps={this.state.ChoosenTipps}/>\n                </div>\n            )\n        }\n        if(type === \"single\") {\n            return(\n                <div>\n                <Singlequestion quizQuestions = {question} quizOptions={options} datafromQuiz={currentIndex} score={this.state.score} checkAnswer={this.checkAnswer}/>\n              </div>\n            )\n        } else if (type === \"number\") {\n            return (\n                <div>\n                    <div id=\"hud\">\n                        <div id=\"hud-item\">\n                            <p className=\"hud-prefix\">\n                                Question {currentIndex + 1} / {QuizData.length}\n                            </p>\n                            <div id=\"progressBar\">\n                                <div id=\"progressBarFull\" style={{ width: `${(currentIndex / QuizData.length) * 100}%` }}></div>\n                            </div>\n                        </div>\n                        <div id=\"hud-item\">\n                            <p className=\"hud-prefix\">\n                                Score\n        </p>\n                            <h1 className=\"hud-main-text\" id=\"score\">\n                                {this.state.score}\n                            </h1>\n                        </div>\n                    </div>\n                    <br></br>\n                    <h2>{question}</h2>\n                    {\n                        options.map((option, index) => (  //for each option, new paragrap\n                            <div key={index} className={`options-container`}>\n                                <p className=\"options-text\">{option}</p>\n                                <input className=\"OwnInput\" type=\"number\" id={index} name=\"quantity\" min=\"1\" ></input>\n                            </div>\n                        ))\n                    }\n                    <br></br>\n                    <div className=\"OwnSubmit\"\n                        onClick={() => this.checkNumber()}>\n                        Submit</div>\n                </div >)\n        } else if (type === \"transport\") {\n            return (\n                <div>\n                    <div id=\"hud\">\n                        <div id=\"hud-item\">\n                            <p className=\"hud-prefix\">\n                                Question {currentIndex + 1} / {QuizData.length}\n                            </p>\n                            <div id=\"progressBar\">\n                                <div id=\"progressBarFull\" style={{ width: `${(currentIndex / QuizData.length) * 100}%` }}></div>\n                            </div>\n                        </div>\n                        <div id=\"hud-item\">\n                            <p className=\"hud-prefix\">\n                                Score\n    </p>\n                            <h1 className=\"hud-main-text\" id=\"score\">\n                                {this.state.score}\n                            </h1>\n                        </div>\n                    </div>\n                    <br></br>\n                    <h2>{question}</h2>\n                    <br></br>\n                    <LoadScript googleMapsApiKey={key} libraries={lib}>\n        <Map />\n      </LoadScript>\n      <br></br>\n      <div className=\"OwnSubmit\"\n                            onClick={() => this.afterMap()}>\n                        Submit</div>\n                </div > )\n        }\n    }\n\n/******************************************************************** */\n/*                 RENDER                                             */\n/******************************************************************** */\n}\n\n\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}