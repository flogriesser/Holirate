{"ast":null,"code":"var _jsxFileName = \"/home/flo/Projects/react/holirate/src/components/Maps/maps.js\";\n\n/*global google*/\n//import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport Quiz from \"../Quiz\";\nimport { GoogleMap\n/*StandaloneSearchBox,*/\n, DirectionsRenderer, DistanceMatrixService } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultLocation = {\n  lat: 48.1374300,\n  lng: 11.5754900\n};\nlet destination = {};\nlet origin = {};\nlet directionsService;\n\nclass Map extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      directions: null,\n      bounds: null\n    };\n\n    this.onMapLoad = map => {\n      directionsService = new google.maps.DirectionsService(); //load default origin and destination\n      //this.changeDirection(origin, destination);\n    };\n\n    this.onSBLoad = ref => {\n      this.searchBox = ref;\n    };\n\n    this.onPlacesChanged = () => {\n      //pass the new place location as the origin\n      origin = document.getElementById(\"Start\").value;\n      console.log(origin);\n      destination = document.getElementById(\"Stop\").value;\n      this.changeDirection(origin, destination);\n    };\n\n    this.changeDirection = (origin, destination) => {\n      directionsService.route({\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.DRIVING\n      }, (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          //changing the state of directions to the result of direction service\n          var service = new google.maps.DistanceMatrixService();\n          service.getDistanceMatrix({\n            origins: origin,\n            destinations: destination,\n            travelMode: google.maps.TravelMode.DRIVING,\n            unitSystem: google.maps.UnitSystem.METRIC,\n            avoidHighways: false,\n            avoidTolls: false\n          }, function (response, status) {\n            if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != \"ZERO_RESULTS\") {\n              var distance = response.rows[0].elements[0].distance.text;\n              console.log(distance);\n              var duration = response.rows[0].elements[0].duration.text;\n              var dvDistance = document.getElementById(\"dvDistance\");\n            } else {\n              alert(\"Unable to find the distance via road.\");\n            }\n          });\n          console.log(result);\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `options-container`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"options-text\",\n          children: \"Startpunkt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"OwnInput\",\n          type: \"text\",\n          id: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 39\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `options-container`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"options-text\",\n          children: \"Reiseziel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"OwnInput\",\n          type: \"text\",\n          id: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"OwnSubmit\",\n        onClick: () => this.onPlacesChanged(),\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"id=\\\"Distance\\\">\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"OwnSubmit\",\n        onClick: () => Quiz.nextQuestionHander(),\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n        center: defaultLocation,\n        zoom: 10,\n        onLoad: map => this.onMapLoad(map),\n        mapContainerStyle: {\n          height: \"40vh\",\n          width: \"80vw\"\n        },\n        children: this.state.directions !== null && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n          directions: this.state.directions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/flo/Projects/react/holirate/src/components/Maps/maps.js"],"names":["React","Quiz","GoogleMap","DirectionsRenderer","DistanceMatrixService","defaultLocation","lat","lng","destination","origin","directionsService","Map","Component","state","directions","bounds","onMapLoad","map","google","maps","DirectionsService","onSBLoad","ref","searchBox","onPlacesChanged","document","getElementById","value","console","log","changeDirection","route","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","service","getDistanceMatrix","origins","destinations","unitSystem","UnitSystem","METRIC","avoidHighways","avoidTolls","response","DistanceMatrixStatus","rows","elements","distance","text","duration","dvDistance","alert","setState","error","render","nextQuestionHander","height","width"],"mappings":"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","sourcesContent":["/*global google*/\n//import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport Quiz from \"../Quiz\"\n\nimport {\n  GoogleMap,\n  /*StandaloneSearchBox,*/\n  DirectionsRenderer,\n  DistanceMatrixService\n} from \"@react-google-maps/api\";\n\nconst defaultLocation = { lat: 48.1374300, lng: 11.5754900 };\nlet destination = { };\nlet origin = {  };\n\n\nlet directionsService;\nclass Map extends React.Component {\n  state = {\n    directions: null,\n    bounds: null\n  };\n\n  onMapLoad = map => {\n    directionsService = new google.maps.DirectionsService();\n\n    //load default origin and destination\n    //this.changeDirection(origin, destination);\n  };\n\n  //function that is called when SearchBox has loaded and assigned ref to this.searchbox  to get the searchbox object\n  onSBLoad = ref => {\n    this.searchBox = ref;\n  };\n\n  onPlacesChanged = () => {\n    //pass the new place location as the origin\n    origin = document.getElementById(\"Start\").value;\n    console.log(origin);\n    destination = document.getElementById(\"Stop\").value;\n    this.changeDirection(\n      origin,\n      destination\n    );\n  };\n\n  //function that is calling the directions service\n  changeDirection = (origin, destination) => {\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.DRIVING\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          //changing the state of directions to the result of direction service\n          var service = new google.maps.DistanceMatrixService();\n          service.getDistanceMatrix({\n            origins: origin,\n            destinations: destination,\n            travelMode: google.maps.TravelMode.DRIVING,\n            unitSystem: google.maps.UnitSystem.METRIC,\n            avoidHighways: false,\n            avoidTolls: false\n        }, function (response, status) {\n            if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != \"ZERO_RESULTS\") {\n                var distance = response.rows[0].elements[0].distance.text;\n                console.log(distance);\n                var duration = response.rows[0].elements[0].duration.text;\n                var dvDistance = document.getElementById(\"dvDistance\");\n            } else {\n                alert(\"Unable to find the distance via road.\");\n            }\n        });\n          console.log(result);\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n  };\n\n\n  render() {\n    return (\n        <div>\n\n                                      <div className={`options-container`}>\n                                <p className=\"options-text\">Startpunkt</p>\n                                <input className=\"OwnInput\" type=\"text\" id=\"Start\" ></input>\n                            </div>\n                            <div className={`options-container`}>\n                                <p className=\"options-text\">Reiseziel</p>\n                                <input className=\"OwnInput\" type=\"text\" id=\"Stop\" ></input>\n                            </div>\n                            <div className=\"OwnSubmit\"\n                            onClick={() => this.onPlacesChanged()}>\n                              \n                        Calculate</div>\n                        <br></br>\n                        <h2>id=\"Distance\"></h2>\n                        <div className=\"OwnSubmit\"\n                            onClick={() => Quiz.nextQuestionHander()}>\n                              \n                        Submit</div>\n                        <br></br>\n\n          <GoogleMap\n            center={defaultLocation}\n            zoom={10}\n            onLoad={map => this.onMapLoad(map)}\n            mapContainerStyle={{ height: \"40vh\", width: \"80vw\" }}\n          >\n            {this.state.directions !== null && (\n              <DirectionsRenderer directions={this.state.directions} />\n            )}\n          </GoogleMap>\n        </div>\n    );\n  }\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}