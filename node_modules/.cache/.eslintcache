[{"/home/flo/Projects/react/Holirate/src/index.js":"1","/home/flo/Projects/react/Holirate/src/components/Quiz.js":"2","/home/flo/Projects/react/Holirate/src/components/Data/Fragen.js":"3","/home/flo/Projects/react/Holirate/src/components/Maps/maps.js":"4","/home/flo/Projects/react/Holirate/src/components/SingleQuestion/singleQuestion.js":"5","/home/flo/Projects/react/Holirate/src/components/Maps/car.js":"6","/home/flo/Projects/react/Holirate/src/components/Score/quizEnd.js":"7","/home/flo/Projects/react/Holirate/src/components/Flight/flight.js":"8","/home/flo/Projects/react/Holirate/src/components/Data/Data.js":"9"},{"size":322,"mtime":1621938464501,"results":"10","hashOfConfig":"11"},{"size":7005,"mtime":1622305761708,"results":"12","hashOfConfig":"11"},{"size":8863,"mtime":1623140344969,"results":"13","hashOfConfig":"11"},{"size":2938,"mtime":1623437740940,"results":"14","hashOfConfig":"11"},{"size":2382,"mtime":1622302557334,"results":"15","hashOfConfig":"11"},{"size":2146,"mtime":1622302612638,"results":"16","hashOfConfig":"11"},{"size":2600,"mtime":1622277123643,"results":"17","hashOfConfig":"11"},{"size":1602,"mtime":1622302592094,"results":"18","hashOfConfig":"11"},{"size":1343,"mtime":1622277086614,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ucnjgc",{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/flo/Projects/react/Holirate/src/index.js",[],"/home/flo/Projects/react/Holirate/src/components/Quiz.js",["39","40","41"],"/*\n * @Author: Florian Griesser \n * @Date: 2021-05-29 10:28:56 \n * @Last Modified by: Florian Griesser\n * @Last Modified time: 2021-05-29 18:29:21\n */\nimport React, { Component } from 'react'\nimport { QuizData } from './Data/Fragen';\nimport './circle.css';\nimport { LoadScript } from \"@react-google-maps/api\";\n\n//import { BasicMap } from \"./Maps/OSM/OSMtest\";\n\nimport Map from \"./Maps/maps\";\n\nimport Singlequestion from './SingleQuestion/singleQuestion';\nimport QuizEnds from './Score/quizEnd';\nimport Car from './Maps/car';\nimport Flight from './Flight/flight';\n\nconst lib = [\"places\"];\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\n\nclass Quiz extends Component {\n\n    state = {\n        userAnswer: null,    //current users answer\n        type: \"single\",         //question Type\n        currentIndex: 0,     //current questions index\n        options: [],        //the options\n        values: null,         //Values of Single or Multiple choice\n        tipps: null,\n        ChoosenTipps: [],\n        quizEnd: false,\n        score: 0,\n        distance: 0,\n        TravelMode: 'Car',\n        co2: 0,\n\n        /*num_backpags:0,*/    /*TODO not needed right now*/\n        /*kilo_backpags: 0,*/  /*TODO not needed right now*/\n\n\n        carType: 0,\n        carPower: 0,\n\n\n        directions: null,\n        bounds: null\n    }\n\n\n    //Component that holds the current quiz\n    loadQuiz = () => {\n        const { currentIndex } = this.state //get the current index\n        this.setState(() => {\n            return {\n                question: QuizData[currentIndex].question,\n                type: QuizData[currentIndex].type,\n                options: QuizData[currentIndex].options,\n                values: QuizData[currentIndex].values,\n                tipps: QuizData[currentIndex].tipps,\n                distance: 0,\n                TravelMode: \"Car\"\n            }\n        }\n        )\n    }\n    \n    setDistance = (distanceKM) => {\n        this.setState({\n            distance: distanceKM\n        })\n    }\n\n    //Handles Click event for the next button\n    nextQuestionHander = () => {\n        const {currentIndex} = this.state;\n        if (currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        } else {\n            this.setState({\n                currentIndex: this.state.currentIndex + 1\n            })\n        }\n    }\n\n    afterMap = () => {\n        //var distanceKM = document.getElementById(\"Distance\").value;\n        //console.log(distanceKM)\n        this.setState({\n            currentIndex: this.state.currentIndex + 1,\n            //distance: distanceKM\n        })\n    }\n\n    //Load the quiz once the component mounts\n    componentDidMount() {\n        this.loadQuiz();\n    }\n\n    //Update the component\n    componentDidUpdate(prevProps, prevState) {\n        const { currentIndex } = this.state;\n        if (this.state.currentIndex !== prevState.currentIndex) {\n            this.setState(() => {\n                return {\n                    type: QuizData[currentIndex].type,\n                    question: QuizData[currentIndex].question,\n                    options: QuizData[currentIndex].options,\n                    values: QuizData[currentIndex].values\n                }\n            });\n\n        }\n    }/*componentDidUpdate*/\n\n    callbackCarType = (index) =>{\n        this.setState({\n            carType: index\n        })\n\n        this.state.ChoosenTipps.push(QuizData[this.state.currentIndex].tipps[index]);\n        this.nextQuestionHander();\n    }\n\n    callbackCarPower = (index) =>{\n        this.setState({\n            carPower: index\n        })\n\n        this.state.ChoosenTipps.push(QuizData[this.state.currentIndex].tipps[index]);\n        this.nextQuestionHander();\n    }\n\n    callbackSingleQuestion = (index, points, Travelmode) => {\n        const {score, currentIndex} = this.state;\n        if(Travelmode === null){\n            this.setState({\n                score: score + points\n            });\n        }else{\n            this.setState({\n                TravelMode: Travelmode\n            })\n        }\n\n        this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\n\n        this.nextQuestionHander();\n    }\n\n    callbackFlight = (distance) =>{\n        \n    }\n\n    //Responds to the click of the finish button\n    finishHandler = () => {\n        if (this.state.currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        }\n\n    }\n\n\n    render() {\n        const {quizEnd, currentIndex} = this.state //get the current state     \n        var type = QuizData[currentIndex].type;\n\n        if (quizEnd) {\n            return (\n                <div>\n                    <QuizEnds state={this.state}/>\n                </div>\n            )\n        }\n        \n\n        if (type === \"car\" && this.state.TravelMode === \"Car\"){\n            return(\n                    <Car    state={this.state}\n                            callbackCarType={this.callbackCarType} \n                            callbackCarPower={this.callbackCarPower}/>\n            )\n        }else if (type === \"flight\" && this.state.TravelMode === \"Flight\"){\n            return(\n                <Flight score={this.state.score} \n                currentIndex={this.state.currentIndex} \n                question={this.state.question} \n                callbackFlight={this.props.callbackFlight}/>\n                )\n        } else if (type === \"transport\") {\n            return (\n                <div>\n                    <Map    state={this.state} \n                            setDistance={this.setDistance}/>\n                    <br></br>\n                    <div className=\"OwnSubmit\"\n                            onClick={() => this.afterMap()}>\n                        Submit</div>\n            </div > )\n        }else if(type === \"single\") {\n            return(\n                <Singlequestion state={this.state} callbackSingleQuestion={this.callbackSingleQuestion}/>\n            )\n        }else{\n            /*If none of the above take next question*/\n            /*FIXME Better solution than return null!*/\n            this.setState({\n                currentIndex: this.state.currentIndex +1\n            })\n            return null;\n        }\n    }/*render*/\n\n}/*Quiz*/\n\n\n/*Maps:\n\n                <div>\n                    <LoadScript googleMapsApiKey={key} libraries={lib}>\n                        <Map    score={this.state.score} \n                                currentIndex={this.state.currentIndex} \n                                question={this.state.question} \n                                TravelMode={this.state.TravelMode}\n                                setDistance={this.setDistance}/>\n                    </LoadScript>\n                    <br></br>\n                    <div className=\"OwnSubmit\"\n                            onClick={() => this.afterMap()}>\n                        Submit</div>\n            </div > )\n  \n*/\n\n\nexport default Quiz;","/home/flo/Projects/react/Holirate/src/components/Data/Fragen.js",[],"/home/flo/Projects/react/Holirate/src/components/Maps/maps.js",["42","43","44","45"],"/home/flo/Projects/react/Holirate/src/components/SingleQuestion/singleQuestion.js",[],"/home/flo/Projects/react/Holirate/src/components/Maps/car.js",[],"/home/flo/Projects/react/Holirate/src/components/Score/quizEnd.js",[],"/home/flo/Projects/react/Holirate/src/components/Flight/flight.js",[],"/home/flo/Projects/react/Holirate/src/components/Data/Data.js",[],{"ruleId":"46","severity":1,"message":"47","line":10,"column":10,"nodeType":"48","messageId":"49","endLine":10,"endColumn":20},{"ruleId":"46","severity":1,"message":"50","line":21,"column":7,"nodeType":"48","messageId":"49","endLine":21,"endColumn":10},{"ruleId":"46","severity":1,"message":"51","line":22,"column":7,"nodeType":"48","messageId":"49","endLine":22,"endColumn":10},{"ruleId":"46","severity":1,"message":"52","line":17,"column":5,"nodeType":"48","messageId":"49","endLine":17,"endColumn":15},{"ruleId":"46","severity":1,"message":"53","line":21,"column":5,"nodeType":"48","messageId":"49","endLine":21,"endColumn":12},{"ruleId":"46","severity":1,"message":"54","line":44,"column":9,"nodeType":"48","messageId":"49","endLine":44,"endColumn":17},{"ruleId":"46","severity":1,"message":"55","line":54,"column":15,"nodeType":"48","messageId":"49","endLine":54,"endColumn":23},"no-unused-vars","'LoadScript' is defined but never used.","Identifier","unusedVar","'lib' is assigned a value but never used.","'key' is assigned a value but never used.","'Directions' is assigned a value but never used.","'Geocode' is assigned a value but never used.","'distance' is assigned a value but never used.","'response' is assigned a value but never used."]