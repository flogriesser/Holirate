{"version":3,"sources":["components/Maps/maps.js","components/Fragen.js","components/Quiz.js","index.js"],"names":["directionsService","QuizData","id","type","question","options","values","tipps","defaultLocation","lat","lng","destination","origin","RouteDistance","Map","state","directions","bounds","onMapLoad","map","google","maps","DirectionsService","onSBLoad","ref","searchBox","onPlacesChanged","document","getElementById","value","console","log","changeDirection","route","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","routes","legs","distance","Quiz","setDistance","innerHTML","setState","error","className","onClick","center","zoom","onLoad","mapContainerStyle","height","width","this","React","Component","lib","userAnswer","currentIndex","ChoosenTipps","quizEnd","score","disabled","co2","loadQuiz","nextQuestionHander","afterMap","checkAnswer","answer","index","nextQuestion","push","length","checkNumber","finishHandler","prevProps","prevState","style","transform","tipp","option","name","min","googleMapsApiKey","libraries","distanceKM","App","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.c0a7149e.chunk.js","sourcesContent":["/*global google*/\n//import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport Quiz from \"../Quiz\"\n\nimport {\n  GoogleMap,\n  /*StandaloneSearchBox,*/\n  DirectionsRenderer,\n} from \"@react-google-maps/api\";\n\nconst defaultLocation = { lat: 48.1374300, lng: 11.5754900 };\nlet destination = { };\nlet origin = {  };\nvar RouteDistance = 0;\n\n\nlet directionsService;\n\nclass Map extends React.Component {\n  state = {\n    directions: null,\n    bounds: null\n  };\n\n  onMapLoad = map => {\n    directionsService = new google.maps.DirectionsService();\n\n    //load default origin and destination\n    //this.changeDirection(origin, destination);\n  };\n\n  //function that is called when SearchBox has loaded and assigned ref to this.searchbox  to get the searchbox object\n  onSBLoad = ref => {\n    this.searchBox = ref;\n  };\n\n  onPlacesChanged = () => {\n    //pass the new place location as the origin\n    origin = document.getElementById(\"Start\").value;\n    console.log(origin);\n    destination = document.getElementById(\"Stop\").value;\n    this.changeDirection(\n      origin,\n      destination\n    );\n  };\n\n  //function that is calling the directions service\n  changeDirection = (origin, destination) => {\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.DRIVING\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          //changing the state of directions to the result of direction service\n          RouteDistance = result.routes[0].legs[0].distance.value / 1000;\n          console.log(RouteDistance);\n          Quiz.distance = RouteDistance;\n          Quiz.setDistance(result.routes[0].legs[0].distance.value/1000);\n          document.getElementById('Distance').innerHTML = RouteDistance + \" km\";\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n  };\n/*\n   sendDistance= () => {\n    if(RouteDistance !== 0)\n    {\n      //Quiz.setDistance(RouteDistance);\n      Quiz.afterMap();\n    }  \n\n  }\n*/\n  render() {\n    return (\n        <div>\n\n                                      <div className={`options-container`}>\n                                <p className=\"options-text\">Startpunkt</p>\n                                <input className=\"OwnInput\" type=\"text\" id=\"Start\" ></input>\n                            </div>\n                            <div className={`options-container`}>\n                                <p className=\"options-text\">Reiseziel</p>\n                                <input className=\"OwnInput\" type=\"text\" id=\"Stop\" ></input>\n                            </div>\n                            <div className=\"OwnSubmit\"\n                            onClick={() => this.onPlacesChanged()}>\n                              \n                        Calculate</div>\n                        <br></br>\n                        <h2 id=\"Distance\"></h2>\n                        <br></br>\n\n          <GoogleMap\n            center={defaultLocation}\n            zoom={10}\n            onLoad={map => this.onMapLoad(map)}\n            mapContainerStyle={{ height: \"40vh\", width: \"60vw\" }}\n          >\n            {this.state.directions !== null && (\n              <DirectionsRenderer directions={this.state.directions} />\n            )}\n          </GoogleMap>\n        </div>\n    );\n  }\n}\n\nexport default Map;","export const QuizData =[\n  {\n    id: 0,\n    type: \"single\",\n    question : \"Welche Art der Reise ist geplant?\",\n    options: [\"Bergurlaub\", \"Wellness\", \"Flussreise\", \"Cluburlaub\", \"Strandurlaub\", \"Kreuzfahrt\", \"Natururlaub\", \n    \"Studienreise\", \"Städte-Reise\", \"Jugendfreizeit\", \"Kultur-Reise\", \"Incentive-Reise\", \"Bauernhof\", \"Work & Travel\",\n    \"Sporturlaub\", \"Back-Packing\"],\n    values: [5,4,2,2,2,1,5,4,3,3,3,3,5,4,3,3],\n    tipps: [\"Tipp1\", \"Tipp2\", \"Tipp3\", \"Tipp4\", \"Tipp5\", \"Tipp6\", \"Tipp7\", \n    \"Tipp8\", \"Tipp9\", \"Tipp10\", \"Tipp11\", \"Tipp12\", \"Tipp13\", \"Tipp14\",\n    \"Tipp15\", \"Tipp16\"]\n  },\n  {\n    id: 1,\n    type: \"single\",\n    question : \"Für welche Art der Unterkunft hast du Dich entschieden?\",\n    options: [\"Hotel\", \"AirBnB\", \"Hostel\", \"Privat-Unterkunft\", \"Jugendherberge\", \"Couch-Surfing\", \"Camping-Platz\", \"Sternenhimmel\"],\n    values: [1, 2, 2, 3, 3, 4, 4, 5],\n    tipps: [\"Tipp1\", \"Tipp2\", \"Tipp3\", \"Tipp4\", \"Tipp5\", \"Tipp6\", \"Tipp7\", \"Tipp8\"]\n  },\n  {\n    id: 2,\n    type: \"number\",\n    question: \"Für wie viele Tage wird verreist?\",\n    options:  [\"Tage\", \"Wochen\"],\n    values: [],\n    tipps: [\"Tipp1\", \"Tipp2\"]\n  },\n  {\n    id: 3,\n    type: \"number\",\n    question: \"Mit wie vielen Leuten verreist Du?\",\n    options:  [\"Erwachsene\", \"Kinder/Jugendliche (0-16)\"],\n    values: [],\n    tipps: [\"Tipp1\", \"Tipp2\"]\n  },\n  {\n    id: 4,\n    type: \"single\",\n    question: \"Mit welchem Transportmittel vereist du?\",\n    options:  [\"Auto\", \"Flugzeug\", \"Zug\", \"Fahrrad\"],\n    values: [],\n    tipps: [\"Tipp1\", \"Tipp2\", \"Tipp3\", \"Tipp4\"]\n  },\n  {\n    id: 5,\n    type: \"transport\",\n    question: \"Wohin geht die Reise?\",\n    options:  [\"Startpunkt:   \", \"Endpunkt:   \"],\n    values: [],\n    tipps: [\"Tipp1\", \"Tipp2\"]\n  },\n  {\n    id: 6,\n    type: \"single\",\n    question: \"Wie wird sich vor Ort bewegt?\",\n    options: [\"Auto\", \"Zu Fuß\", \"Zug\", \"E-Scooter\", \"Bus\", \"Motorrad\",\"Fahrrad\", \"Boot\"],\n    values: [1,5,3,4,4,3,5,2],\n    tipps: [\"Tipp1\", \"Tipp2\", \"Tipp3\", \"Tipp4\", \"Tipp5\", \"Tipp6\",\"Tipp7\", \"Tipp8\"]\n  },\n  {\n    id: 7,\n    type: \"number\",\n    question: \"Wie lange dauert die Anreise?\",\n    options:  [\"Tage\", \"Stunden\"],\n    values: [],\n    tipps: [\"Tipp1\", \"Tipp2\"]\n  },\n  {\n    id: 8,\n    type: \"number\",\n    question: \"Mit wie viel Gepäck wird verreist?\",\n    options:  [\"Kilo\", \"Anzahl\"],\n    values: [],\n    tipps: [\"Tipp1\", \"Tipp2\"]\n  },\n  {\n    id: 9,\n    type: \"single\",\n    question: \"Welcher Souvenier-Typ bis du?\",\n    options: [\"Oma bekommt immer eine Postkarte\", \"Magnete für alle meine Freunde.\", \"Eine getöpferte Tasse für Mama.\", \"Muscheln und Sand vom Strand\", \n      \"Ich räume fast alle Souvenir-Läden leer.\", \"Ich schwöre auf Armbänder.\",\"Möbelstücke kommen immer mit nach Hause.\", \"Fotos reichen völlig aus!\"],\n    values: [5,4,4,5,1,2,1,5],\n    tipps: [\"Tipp1\", \"Tipp2\", \"Tipp3\", \"Tipp4\", \"Tipp5\", \"Tipp6\",\"Tipp7\", \"Tipp8\"]\n  },\n  {\n    id: 10,\n    type: \"single\",\n    question: \"Wie erzählst du anderen von deiner Reise?\",\n    options: [\"Posts bei Insta & Co.\", \"Ich rufe Mama an und erzähle alles.\", \"Ich drucke alle Fotos aus.\", \"Ich gestalte ein Fotoalbum.\", \"Ich lade zum Diashow-Abend ein\"],\n    values: [3,3,2,1,3],\n    tipps: [\"Tipp1\", \"Tipp2\", \"Tipp3\", \"Tipp4\", \"Tipp5\"]\n  }\n]\n","import React, { Component } from 'react'\r\n//import {QuizData} from './QuizData';\r\nimport { QuizData } from './Fragen';\r\n/*import '../App.css'*/\r\nimport './circle.css';\r\n//import {initialize, notFound, foundYou, calcRoute} from './Maps/maps';\r\nimport { LoadScript } from \"@react-google-maps/api\";\r\nimport Map from \"./Maps/maps\";\r\n\r\n\r\nconst lib = [\"places\"];\r\nconst key = \"AIzaSyAF6K0mCOn8PxRcsTPBapCtXyr_zZ6OWGk\"; // PUT GMAP API KEY HERE\r\nvar distance = 0;\r\n\r\n\r\nclass Quiz extends Component {\r\n\r\n    state = {\r\n        userAnswer: null,    //current users answer\r\n        type: \"single\",         //question Type\r\n        currentIndex: 0,     //current questions index\r\n        options: [],        //the options\r\n        values: null,         //Values of Single or Multiple choice\r\n        tipps: null,\r\n        ChoosenTipps: [],\r\n        quizEnd: false,\r\n        score: 0,\r\n        disabled: true,\r\n        /*distance: 0,*/\r\n        TravelMode: 'DRIVING',\r\n        co2: 0,\r\n\r\n        directions: null,\r\n        bounds: null\r\n    }\r\n\r\n\r\n    //Component that holds the current quiz\r\n    loadQuiz = () => {\r\n        const { currentIndex } = this.state //get the current index\r\n        this.setState(() => {\r\n            return {\r\n                question: QuizData[currentIndex].question,\r\n                type: QuizData[currentIndex].type,\r\n                options: QuizData[currentIndex].options,\r\n                values: QuizData[currentIndex].values,\r\n                tipps: QuizData[currentIndex].tipps,\r\n                 /*distance: 0,*/\r\n            }\r\n        }\r\n        )\r\n    }\r\n    \r\n    static setDistance = (distanceKM) => {\r\n        distance = distanceKM;\r\n    }\r\n\r\n    //Handles Click event for the next button\r\n    nextQuestionHander = () => {\r\n        const { userAnswer, score } = this.state\r\n        this.setState({\r\n            score: score + userAnswer,\r\n            currentIndex: this.state.currentIndex + 1\r\n        })\r\n    }\r\n\r\n    afterMap = () => {\r\n        //var distanceKM = document.getElementById(\"Distance\").value;\r\n        //console.log(distanceKM)\r\n        console.log(distance);\r\n        this.setState({\r\n            currentIndex: this.state.currentIndex + 1,\r\n            //distance: distanceKM\r\n        })\r\n    }\r\n\r\n    //Load the quiz once the component mounts\r\n    componentDidMount() {\r\n        this.loadQuiz();\r\n    }\r\n\r\n    //Update the component\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { currentIndex } = this.state;\r\n        if (this.state.currentIndex !== prevState.currentIndex) {\r\n            this.setState(() => {\r\n                return {\r\n                    disabled: true,\r\n                    type: QuizData[currentIndex].type,\r\n                    question: QuizData[currentIndex].question,\r\n                    options: QuizData[currentIndex].options,\r\n                    values: QuizData[currentIndex].values\r\n\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    //Check the answer\r\n    checkAnswer = (answer, index) => {\r\n        const { currentIndex, score } = this.state;\r\n        var nextQuestion = 1;\r\n        if (QuizData[currentIndex].options[index] === \"Flugzeug\") {\r\n            console.log(\"1. Flugzeug\");\r\n            nextQuestion = 2;\r\n        } else if (QuizData[currentIndex].options[index] === \"Auto\" ||\r\n            QuizData[currentIndex].options[index] === \"Fahrad\" ||\r\n            QuizData[currentIndex].options[index] === \"Zug\") {\r\n            console.log(QuizData[currentIndex].options[index]);\r\n            nextQuestion = 1;\r\n        } else {\r\n            this.setState({\r\n                disabled: false,\r\n                score: score + QuizData[currentIndex].values[index]\r\n            })\r\n        }\r\n        this.state.ChoosenTipps.push(QuizData[currentIndex].tipps[index]);\r\n\r\n        if (currentIndex === QuizData.length - 1) {\r\n            this.setState({\r\n                quizEnd: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                currentIndex: this.state.currentIndex + nextQuestion\r\n            })\r\n        }\r\n    }\r\n\r\n    checkNumber = (index) => {\r\n        const { currentIndex } = this.state;\r\n        console.log(currentIndex);\r\n\r\n        this.setState({\r\n            disabled: false,\r\n            currentIndex: this.state.currentIndex + 1\r\n        })\r\n    }\r\n\r\n    //Responds to the click of the finish button\r\n    finishHandler = () => {\r\n        if (this.state.currentIndex === QuizData.length - 1) {\r\n            this.setState({\r\n                quizEnd: true\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n/******************************************************************** */\r\n/*                 RENDER                                             */\r\n/******************************************************************** */\r\n\r\n    render() {\r\n        const { question, options, currentIndex, quizEnd, ChoosenTipps, type } = this.state //get the current state       \r\n        if (quizEnd) {\r\n\r\n            return (\r\n                <div>\r\n                    <h1>Dein Holirate Rating ist fertig!</h1>\r\n                    <div className=\"circle-wrap\">\r\n                        <div className=\"circle\">\r\n\r\n                            <div className=\"mask full\">\r\n                                <div className=\"fill\" ></div>\r\n                            </div>\r\n\r\n                            <div className=\"mask half\">\r\n                                <div className=\"fill\" style={{ transform: `rotate(${360 * this.state.score / 100}deg)` }}></div>\r\n                            </div>\r\n\r\n                            <div className=\"inside-circle\">\r\n                                {this.state.score}%\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <h2>Kilometer: {distance}</h2>\r\n                    <h1>{this.state.score} points</h1>\r\n                    <br></br>\r\n                    <h4>Hier noch ein paar Tipps für deine Reise</h4>\r\n                    <br></br>\r\n                    <ul>\r\n\r\n                        {ChoosenTipps.map((tipp, index) => (\r\n                            <li className='options-container'\r\n                                key={index}>\r\n                                <p className=\"options-text\"> {tipp}</p>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n        if (type === \"single\") {\r\n            return (\r\n                <div>\r\n                    <div id=\"hud\">\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Question {currentIndex + 1} / {QuizData.length}\r\n                            </p>\r\n                            <div id=\"progressBar\">\r\n                                <div id=\"progressBarFull\" style={{ width: `${(currentIndex / QuizData.length) * 100}%` }}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Score\r\n            </p>\r\n                            <h1 className=\"hud-main-text\" id=\"score\">\r\n                                {this.state.score}\r\n                            </h1>\r\n                        </div>\r\n                    </div>\r\n                    <br></br>\r\n                    <h2>{question}</h2>\r\n                    <br></br>\r\n                    {\r\n                        options.map((option, index) => (  //for each option, new paragrap\r\n                            <div key={index}\r\n                                className={`options-container`}\r\n                                onClick={() => this.checkAnswer(option, index)}>\r\n                                <p className=\"options-prefix\">{index + 1}</p>\r\n                                <p className=\"options-text\"> {option}</p>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div >\r\n            )\r\n        } else if (type === \"number\") {\r\n            return (\r\n                <div>\r\n                    <div id=\"hud\">\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Question {currentIndex + 1} / {QuizData.length}\r\n                            </p>\r\n                            <div id=\"progressBar\">\r\n                                <div id=\"progressBarFull\" style={{ width: `${(currentIndex / QuizData.length) * 100}%` }}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Score\r\n        </p>\r\n                            <h1 className=\"hud-main-text\" id=\"score\">\r\n                                {this.state.score}\r\n                            </h1>\r\n                        </div>\r\n                    </div>\r\n                    <br></br>\r\n                    <h2>{question}</h2>\r\n                    {\r\n                        options.map((option, index) => (  //for each option, new paragrap\r\n                            <div key={index} className={`options-container`}>\r\n                                <p className=\"options-text\">{option}</p>\r\n                                <input className=\"OwnInput\" type=\"number\" id={index} name=\"quantity\" min=\"1\" ></input>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    <br></br>\r\n                    <div className=\"OwnSubmit\"\r\n                        onClick={() => this.checkNumber()}>\r\n                        Submit</div>\r\n                </div >)\r\n        } else if (type === \"transport\") {\r\n            return (\r\n                <div>\r\n                    <div id=\"hud\">\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Question {currentIndex + 1} / {QuizData.length}\r\n                            </p>\r\n                            <div id=\"progressBar\">\r\n                                <div id=\"progressBarFull\" style={{ width: `${(currentIndex / QuizData.length) * 100}%` }}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"hud-item\">\r\n                            <p className=\"hud-prefix\">\r\n                                Score\r\n    </p>\r\n                            <h1 className=\"hud-main-text\" id=\"score\">\r\n                                {this.state.score}\r\n                            </h1>\r\n                        </div>\r\n                    </div>\r\n                    <br></br>\r\n                    <h2>{question}</h2>\r\n                    <br></br>\r\n                    <LoadScript googleMapsApiKey={key} libraries={lib}>\r\n        <Map />\r\n      </LoadScript>\r\n      <br></br>\r\n      <div className=\"OwnSubmit\"\r\n                            onClick={() => this.afterMap()}>\r\n                        Submit</div>\r\n                </div > )\r\n        }\r\n    }\r\n\r\n/******************************************************************** */\r\n/*                 RENDER                                             */\r\n/******************************************************************** */\r\n}\r\n\r\n\r\nexport default Quiz;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Quiz from './components/Quiz'\r\n\r\nimport './styles.css';\r\n//import { QuizData } from './components/QuizData';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Quiz />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst rootElement = document.getElementById('root');\r\nReactDOM.render(<App></App>, rootElement) \r\n"],"sourceRoot":""}